// Generated by Haxe 4.0.0-rc.3+e3df7a4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class DateTools {
	static __format_get(d,e) {
		switch(e) {
		case "%":
			return "%";
		case "A":
			return DateTools.DAY_NAMES[d.getDay()];
		case "B":
			return DateTools.MONTH_NAMES[d.getMonth()];
		case "C":
			return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
		case "D":
			return DateTools.__format(d,"%m/%d/%y");
		case "F":
			return DateTools.__format(d,"%Y-%m-%d");
		case "I":case "l":
			var hour = d.getHours() % 12;
			return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
		case "M":
			return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
		case "R":
			return DateTools.__format(d,"%H:%M");
		case "S":
			return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
		case "T":
			return DateTools.__format(d,"%H:%M:%S");
		case "Y":
			return Std.string(d.getFullYear());
		case "a":
			return DateTools.DAY_SHORT_NAMES[d.getDay()];
		case "b":case "h":
			return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
		case "d":
			return StringTools.lpad(Std.string(d.getDate()),"0",2);
		case "e":
			return Std.string(d.getDate());
		case "H":case "k":
			return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
		case "m":
			return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
		case "n":
			return "\n";
		case "p":
			if(d.getHours() > 11) {
				return "PM";
			} else {
				return "AM";
			}
			break;
		case "r":
			return DateTools.__format(d,"%I:%M:%S %p");
		case "s":
			return Std.string(d.getTime() / 1000 | 0);
		case "t":
			return "\t";
		case "u":
			var t = d.getDay();
			if(t == 0) {
				return "7";
			} else if(t == null) {
				return "null";
			} else {
				return "" + t;
			}
			break;
		case "w":
			return Std.string(d.getDay());
		case "y":
			return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
		default:
			throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
		}
	}
	static __format(d,f) {
		var r_b = "";
		var p = 0;
		while(true) {
			var np = f.indexOf("%",p);
			if(np < 0) {
				break;
			}
			var len = np - p;
			r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
			r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
			p = np + 2;
		}
		var len1 = f.length - p;
		r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
		return r_b;
	}
	static format(d,f) {
		return DateTools.__format(d,f);
	}
}
DateTools.__name__ = true;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static copy(o) {
		var o2 = { };
		var _g = 0;
		var _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
Std.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		var elen = end.length;
		var slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		var s = "";
		var hexChars = "0123456789ABCDEF";
		while(true) {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
			if(!(n > 0)) {
				break;
			}
		}
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
}
StringTools.__name__ = true;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_IMap {
}
haxe_IMap.__name__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_Timer {
	constructor(time_ms) {
		var me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		var t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		var hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
}
haxe_crypto_Base64.__name__ = true;
class haxe_crypto_BaseCode {
	constructor(base) {
		var len = base.length;
		var nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	initTable() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = true;
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	keys() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
}
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
class haxe_ds__$StringMap_StringMapIterator {
	constructor(map,keys) {
		this.map = map;
		this.keys = keys;
		this.index = 0;
		this.count = keys.length;
	}
	hasNext() {
		return this.index < this.count;
	}
	next() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
}
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
Object.assign(haxe_ds__$StringMap_StringMapIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapIterator
});
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	exists(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = true;
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_io_Input {
	readByte() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	readBytes(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	close() {
	}
}
haxe_io_Input.__name__ = true;
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
class haxe_io_Output {
	writeByte(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	close() {
	}
}
haxe_io_Output.__name__ = true;
Object.assign(haxe_io_Output.prototype, {
	__class__: haxe_io_Output
});
class httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$ {
	static toMessage(this1) {
		var this2 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(this1);
		return this2;
	}
	static toInt(this1) {
		return this1;
	}
	static fromErrorCode(code) {
		return code;
	}
	static toWebResponse(this1) {
		return httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toOutgoingResponse(this1);
	}
	static toOutgoingResponse(this1) {
		var this2 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(this1);
		var this3 = new tink_http_ResponseHeaderBase(this1,this2,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
		var this4 = new tink_http__$Response_OutgoingResponseData(this3,tink_io__$Source_Source_$Impl_$.EMPTY);
		return this4;
	}
	static fromIncomingResponse(res) {
		return res.header.statusCode;
	}
}
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.__name__ = true;
class httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$ {
	static _new(statusCode) {
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(statusCode);
		return this1;
	}
	static fromCode(statusCode) {
		switch(statusCode) {
		case 100:
			return "Continue";
		case 101:
			return "Switching Protocols";
		case 102:
			return "Processing";
		case 200:
			return "OK";
		case 201:
			return "Created";
		case 202:
			return "Accepted";
		case 203:
			return "Non-Authoritative Information";
		case 204:
			return "No Content";
		case 205:
			return "Reset Content";
		case 206:
			return "Partial Content";
		case 207:
			return "Multi-Status";
		case 208:
			return "Already Reported";
		case 226:
			return "IM Used";
		case 300:
			return "Multiple Choices";
		case 301:
			return "Moved Permanently";
		case 302:
			return "Found";
		case 303:
			return "See Other";
		case 304:
			return "Not Modified";
		case 305:
			return "Use Proxy";
		case 306:
			return "Switch Proxy";
		case 307:
			return "Temporary Redirect";
		case 308:
			return "Permanent Redirect";
		case 400:
			return "Bad Request";
		case 401:
			return "Unauthorized";
		case 402:
			return "Payment Required";
		case 403:
			return "Forbidden";
		case 404:
			return "Not Found";
		case 405:
			return "Method Not Allowed";
		case 406:
			return "Not Acceptable";
		case 407:
			return "Proxy Authentication Required";
		case 408:
			return "Request Timeout";
		case 409:
			return "Conflict";
		case 410:
			return "Gone";
		case 411:
			return "Length Required";
		case 412:
			return "Precondition Failed";
		case 413:
			return "Payload Too Large";
		case 414:
			return "URI Too Long";
		case 415:
			return "Unsupported Media Type";
		case 416:
			return "Range Not Satisfiable";
		case 417:
			return "Expectation Failed";
		case 418:
			return "I'm a teapot";
		case 421:
			return "Misdirected Request";
		case 422:
			return "Unprocessable Entity";
		case 423:
			return "Locked";
		case 424:
			return "Failed Dependency";
		case 426:
			return "Upgrade Required";
		case 428:
			return "Precondition Required";
		case 429:
			return "Too Many Requests";
		case 431:
			return "Request Header Fields Too Large";
		case 451:
			return "Unavailable For Legal Reasons";
		case 500:
			return "Internal Server Error";
		case 501:
			return "Not Implemented";
		case 502:
			return "Bad Gateway";
		case 503:
			return "Service Unavailable";
		case 504:
			return "Gateway Timeout";
		case 505:
			return "HTTP Version Not Supported";
		case 506:
			return "Variant Also Negotiates";
		case 507:
			return "Insufficient Storage";
		case 508:
			return "Loop Detected";
		case 510:
			return "Not Extended";
		case 511:
			return "Network Authentication Required";
		default:
			return "Unknown Status";
		}
	}
}
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
	static wrap(val) {
		if(((val) instanceof Error)) {
			return val;
		} else {
			return new js__$Boot_HaxeError(val);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
});
class js_Boot {
	static getClass(o) {
		if(((o) instanceof Array) && o.__enum__ == null) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s += "\t";
					var tmp = n + "(";
					var _g = [];
					var _g1 = 0;
					var _g2 = con.__params__;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						_g.push(js_Boot.__string_rec(o[p],s));
					}
					return tmp + _g.join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(((o) instanceof cl)) {
						return true;
					}
					if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			if(o.__enum__ != null) {
				return $hxEnums[o.__enum__] == cl;
			} else {
				return false;
			}
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		var o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
js_node_buffer__$Buffer_Helper.__name__ = true;
var js_node_http_Server = require("http").Server;
var js_node_stream_PassThrough = require("stream").PassThrough;
var server_Config = require("./config.js");
var server_SetupFromTypescript = require("./setup-express-app").default;
var server_externs_express_Express = require("express");
class server_Main {
	static main() {
		var chalk = require("chalk");
		server_Main.app.use("/tink_api",function(a,b,next) {
			server_TinkAPI.main(a,b);
			return;
		});
		server_Main.app = server_SetupFromTypescript(server_Main.app);
		server_Main.app.listen(server_Config.SERVER_PORT,function() {
			console.log("src/hx/server/Main.hx:43:","Express server listening on port " + server_Config.SERVER_PORT);
			return;
		});
	}
}
server_Main.__name__ = true;
class server_Root {
	constructor() {
	}
	hello(name) {
		if(name == null) {
			name = "World";
		}
		return { slideshow : { title : "Look!", author : "Mr. Bean", date : "2018-08-08", slides : [{ title : "Woohoo", type : "silly", items : ["item_foo","item_bar"]}]}};
	}
}
server_Root.__name__ = true;
Object.assign(server_Root.prototype, {
	__class__: server_Root
});
class tink_web_routing_Router0 {
	constructor(target) {
		this.target = target;
	}
	route(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = l > 2;
		var _g1 = l > 1;
		var _g3 = ctx.part(1);
		var _g4 = ctx.part(0);
		if(ctx.request.header.method == "GET") {
			switch(l > 0) {
			case false:
				return tink_core__$Promise_Promise_$Impl_$.ofSpecific(this.hello(ctx,null));
			case true:
				if(_g4 == "print") {
					if(_g1 == true) {
						if(_g == false) {
							var name = _g3;
							return tink_core__$Promise_Promise_$Impl_$.ofSpecific(this.hello(ctx,name));
						} else {
							var this1 = ctx.request.header.url;
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : this1.path + "?" + this1.query),{ fileName : "src/hx/server/TinkAPI.hx", lineNumber : 43, className : "tink.web.routing.Router0", methodName : "route"}))));
						}
					} else {
						var this2 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this2.query == null ? this2.path : this2.path + "?" + this2.query),{ fileName : "src/hx/server/TinkAPI.hx", lineNumber : 43, className : "tink.web.routing.Router0", methodName : "route"}))));
					}
				} else {
					var this3 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this3.query == null ? this3.path : this3.path + "?" + this3.query),{ fileName : "src/hx/server/TinkAPI.hx", lineNumber : 43, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			}
		} else {
			var this4 = ctx.request.header.url;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this4.query == null ? this4.path : this4.path + "?" + this4.query),{ fileName : "src/hx/server/TinkAPI.hx", lineNumber : 43, className : "tink.web.routing.Router0", methodName : "route"}))));
		}
	}
	hello(ctx,name) {
		var d = this.target;
		var d1;
		if(name == null) {
			d1 = null;
		} else {
			var _g = tink__$Stringly_Stringly_$Impl_$.parse(name,function(s) {
				return s;
			});
			switch(_g._hx_index) {
			case 0:
				var v = _g.data;
				d1 = v;
				break;
			case 1:
				var e = _g.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
		}
		return tink_core__$Promise_Promise_$Impl_$.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d.hello(d1)))),function(__data__) {
			if(ctx.accepts("application/json")) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing__$Response_Response_$Impl_$.textual(200,"application/json",new tink_json_Writer0().write(__data__),[]))));
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(415,"Unsupported Media Type",{ fileName : "src/hx/server/TinkAPI.hx", lineNumber : 21, className : "tink.web.routing.Router0", methodName : "hello"}))));
		});
	}
}
tink_web_routing_Router0.__name__ = true;
Object.assign(tink_web_routing_Router0.prototype, {
	__class__: tink_web_routing_Router0
});
class tink_http_Container {
}
tink_http_Container.__name__ = true;
Object.assign(tink_http_Container.prototype, {
	__class__: tink_http_Container
});
class tink_http_containers_NodeContainer {
	constructor(kind,opt) {
		this.kind = kind;
		this.upgradable = opt != null && opt.upgradable;
	}
	run(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var failures = tink_core__$Signal_Signal_$Impl_$.trigger();
			var server;
			var _g = _gthis.kind;
			switch(_g._hx_index) {
			case 0:
				var server1 = _g.server;
				server = server1;
				break;
			case 1:
				var port = _g.port;
				var server2 = new js_node_http_Server();
				server2.listen(port);
				server = server2;
				break;
			case 2:
				var host = _g.host;
				var server3 = new js_node_http_Server();
				server3.listen(tink_url__$Host_Host_$Impl_$.get_port(host),tink_url__$Host_Host_$Impl_$.get_name(host));
				server = server3;
				break;
			case 3:
				var path = _g.path;
				var server4 = new js_node_http_Server();
				server4.listen(path);
				server = server4;
				break;
			case 4:
				var fd = _g.fd;
				var server5 = new js_node_http_Server();
				server5.listen(fd);
				server = server5;
				break;
			}
			var tinkify = function(e) {
				return tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/http/containers/NodeContainer.hx", lineNumber : 82, className : "tink.http.containers.NodeContainer", methodName : "run"});
			};
			server.on("error",function(e1) {
				cb(tink_http_ContainerResult.Failed(e1));
			});
			if(_gthis.upgradable) {
				var tmp = tink_http_containers_NodeContainer.toUpgradeHandler(handler);
				server.on("upgrade",tmp);
			}
			var onListen = function() {
				var onListen1 = tink_http_ContainerResult.Running({ shutdown : function(hard) {
					if(hard) {
						console.log("tink/http/containers/NodeContainer.hx:95:","Warning: hard shutdown not implemented");
					}
					var ret = tink_core__$Future_Future_$Impl_$.async(function(cb1) {
						server.close(function() {
							cb1(true);
						});
					}).map(tink_core_Outcome.Success);
					return ret.gather();
				}, failures : failures});
				cb(onListen1);
			};
			if(server.listening) {
				onListen();
			} else {
				server.on("listening",onListen);
			}
			var tmp1 = tink_http_containers_NodeContainer.toNodeHandler(handler);
			server.on("request",tmp1);
			server.on("error",function(e2) {
				cb(tink_http_ContainerResult.Failed(e2));
			});
		});
	}
	static toNodeHandler(handler) {
		return function(req,res) {
			var req1 = req.socket.remoteAddress;
			var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
			var options = null;
			if(options == null) {
				options = { };
			}
			var tmp1 = tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,req,options.chunkSize,options.onEnd));
			handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
				var out1 = out.header.statusCode;
				var out2 = out.header.reason;
				var _g = [];
				var h = HxOverrides.iter(out.header.fields);
				while(h.hasNext()) {
					var h1 = h.next();
					_g.push([h1.name,h1.value]);
				}
				res.writeHead(out1,out2,_g);
				tink_io__$Source_Source_$Impl_$.pipeTo(out.body,tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,res)).handle(function(x) {
					res.end();
				});
			});
		};
	}
	static toUpgradeHandler(handler) {
		return function(req,socket,head) {
			var req1 = req.socket.remoteAddress;
			var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
			var options = null;
			if(options == null) {
				options = { };
			}
			var tmp1 = tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,socket,options.chunkSize,options.onEnd));
			handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
				tink_io__$Source_Source_$Impl_$.pipeTo(out.body.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(out.header.toString()))))),tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,socket)).handle(function(_) {
					socket.end();
				});
			});
		};
	}
}
tink_http_containers_NodeContainer.__name__ = true;
tink_http_containers_NodeContainer.__interfaces__ = [tink_http_Container];
Object.assign(tink_http_containers_NodeContainer.prototype, {
	__class__: tink_http_containers_NodeContainer
});
class tink_http_Header {
	constructor(fields) {
		if(tink_http_Header._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(fields);
	}
	_hx_constructor(fields) {
		var tmp;
		if(fields == null) {
			tmp = [];
		} else {
			var v = fields;
			tmp = v;
		}
		this.fields = tmp;
	}
	get(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	byName(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			var v = _g[0];
			return tink_core_Outcome.Success(v);
		default:
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	contentType() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	iterator() {
		return HxOverrides.iter(this.fields);
	}
	concat(fields) {
		return new tink_http_Header(this.fields.concat(fields));
	}
	getContentLength() {
		var _g = this.byName("content-length");
		switch(_g._hx_index) {
		case 0:
			var _hx_tmp = Std.parseInt(_g.data);
			if(_hx_tmp == null) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Content-Length Header",{ fileName : "tink/http/Header.hx", lineNumber : 120, className : "tink.http.Header", methodName : "getContentLength"}));
			} else {
				var v = _hx_tmp;
				return tink_core_Outcome.Success(v);
			}
			break;
		case 1:
			var e = _g.failure;
			return tink_core_Outcome.Failure(e);
		}
	}
	accepts(type) {
		var prefix = type.split("/")[0];
		return tink_core_OutcomeTools.map(this.byName("accept"),function(v) {
			var _g = 0;
			var _g1 = tink_http__$Header_HeaderValue_$Impl_$.parse(v);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.value == "*/*" || entry.value == type) {
					return true;
				}
				var _g2 = entry.value.split("/");
				if(_g2.length == 2) {
					if(_g2[1] == "*") {
						var p = _g2[0];
						if(prefix == p) {
							return true;
						}
					}
				}
			}
			return false;
		});
	}
	get_LINEBREAK() {
		return "\r\n";
	}
	toString() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(f.toString());
		}
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
	headerNotFound(name) {
		return "No " + name + " header found";
	}
}
tink_http_Header.__name__ = true;
Object.assign(tink_http_Header.prototype, {
	__class__: tink_http_Header
});
class tink_http_RequestHeader extends tink_http_Header {
	constructor(method,url,protocol,fields) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		tink_http_Header._hx_skip_constructor = true;
		super();
		tink_http_Header._hx_skip_constructor = false;
		this._hx_constructor(method,url,protocol,fields);
	}
	_hx_constructor(method,url,protocol,fields) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		this.method = method;
		this.url = url;
		this.protocol = protocol;
		super._hx_constructor(fields);
	}
	concat(fields) {
		return new tink_http_RequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	toString() {
		var this1 = this.url;
		return "" + this.method + " " + (this1.query == null ? this1.path : this1.path + "?" + this1.query) + " " + this.protocol + "\r\n" + super.toString();
	}
}
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
Object.assign(tink_http_RequestHeader.prototype, {
	__class__: tink_http_RequestHeader
});
class tink_http_IncomingRequestHeader extends tink_http_RequestHeader {
	constructor(method,url,protocol,fields) {
		super(method,url,protocol,fields);
	}
	getCookies() {
		if(this.cookies == null) {
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			var this1 = "cookie".toLowerCase();
			var _g2 = this.get(this1);
			while(_g1 < _g2.length) {
				var header = _g2[_g1];
				++_g1;
				var entry = new tink_url__$Query_QueryStringParser(header,";","=",0);
				while(entry.hasNext()) {
					var entry1 = entry.next();
					var key = entry1.name;
					var value = tink_url__$Portion_Portion_$Impl_$.toString(entry1.value);
					if(__map_reserved[key] != null) {
						_g.setReserved(key,value);
					} else {
						_g.h[key] = value;
					}
				}
			}
			this.cookies = _g;
		}
		return this.cookies;
	}
	concat(fields) {
		return new tink_http_IncomingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	cookieNames() {
		return this.cookies.keys();
	}
	getCookie(name) {
		var _this = this.getCookies();
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	getAuth() {
		return this.getAuthWith(function(s,p) {
			switch(s) {
			case "Basic":
				var decoded;
				try {
					decoded = haxe_crypto_Base64.decode(p).toString();
				} catch( e ) {
					return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error in decoding basic auth",((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/http/Request.hx", lineNumber : 67, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				}
				var _g = decoded.indexOf(":");
				if(_g == -1) {
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Cannot parse username and password because \":\" is missing",{ fileName : "tink/http/Request.hx", lineNumber : 69, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				} else {
					var i = _g;
					return tink_core_Outcome.Success(tink_http_Authorization.Basic(HxOverrides.substr(decoded,0,i),HxOverrides.substr(decoded,i + 1,null)));
				}
				break;
			case "Bearer":
				return tink_core_Outcome.Success(tink_http_Authorization.Bearer(p));
			default:
				var s1 = s;
				return tink_core_Outcome.Success(tink_http_Authorization.Others(s1,p));
			}
		});
	}
	getAuthWith(parser) {
		return tink_core_OutcomeTools.flatMap(this.byName("authorization"),tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(function(v) {
			var _g = v.indexOf(" ");
			if(_g == -1) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Authorization Header",{ fileName : "tink/http/Request.hx", lineNumber : 81, className : "tink.http.IncomingRequestHeader", methodName : "getAuthWith"}));
			} else {
				var i = _g;
				return parser(HxOverrides.substr(v,0,i),HxOverrides.substr(v,i + 1,null));
			}
		}));
	}
	static parser() {
		return new tink_http_HeaderParser(function(line,headers) {
			var _g = line.split(" ");
			if(_g.length == 3) {
				var protocol = _g[2];
				var url = _g[1];
				var method = _g[0];
				return tink_core_Outcome.Success(new tink_http_IncomingRequestHeader(method,tink__$Url_Url_$Impl_$.fromString(url),protocol,headers));
			} else {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Request.hx", lineNumber : 95, className : "tink.http.IncomingRequestHeader", methodName : "parser"}));
			}
		});
	}
	static fromIncomingMessage(req) {
		var req1 = req.method;
		var tmp = tink__$Url_Url_$Impl_$.fromString(req.url);
		var tmp1 = "HTTP/" + req.httpVersion;
		var _g = [];
		var _g1 = 0;
		var _g2 = req.rawHeaders.length / 2 | 0;
		while(_g1 < _g2) {
			var i = _g1++;
			var this1 = req.rawHeaders[2 * i].toLowerCase();
			_g.push(new tink_http_HeaderField(this1,req.rawHeaders[2 * i + 1]));
		}
		return new tink_http_IncomingRequestHeader(req1,tmp,tmp1,_g);
	}
}
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
Object.assign(tink_http_IncomingRequestHeader.prototype, {
	__class__: tink_http_IncomingRequestHeader
});
class tink__$Url_Url_$Impl_$ {
	static get_pathWithQuery(this1) {
		if(this1.query == null) {
			return this1.path;
		} else {
			return this1.path + "?" + this1.query;
		}
	}
	static _new(parts) {
		var this1 = parts;
		return this1;
	}
	static resolve(this1,that) {
		if(that.scheme != null) {
			return that;
		} else if(that.host != null) {
			if(that.scheme != null) {
				return that;
			} else {
				var copy = Reflect.copy(that);
				copy.scheme = this1.scheme;
				return copy;
			}
		} else {
			var parts = { path : tink_url__$Path_Path_$Impl_$.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
			tink__$Url_Url_$Impl_$.makePayload(parts);
			var this2 = parts;
			return this2;
		}
	}
	static makePayload(parts) {
		var payload = "";
		var _g7 = parts.scheme;
		var _g6 = parts.query;
		var _g5 = parts.payload;
		var _g4 = parts.path;
		var _g3 = parts.hosts;
		var _g2 = parts.host;
		var _g1 = parts.hash;
		var _g = parts.auth;
		if(_g == null) {
			if(_g2 != null) {
				var host = _g2;
				payload += "//" + host;
			}
		} else if(_g2 == null) {
			var auth = _g;
			payload += "//" + (auth == null ? "" : "" + auth + "@");
		} else {
			var auth1 = _g;
			var host1 = _g2;
			payload += "//" + (auth1 == null ? "" : "" + auth1 + "@") + host1;
		}
		payload += parts.path;
		var _g8 = parts.query;
		if(_g8 != null) {
			var v = _g8;
			payload += "?" + v;
		}
		var _g9 = parts.hash;
		if(_g9 != null) {
			var v1 = _g9;
			payload += "#" + v1;
		}
		parts.payload = payload.toString();
	}
	static toString(this1) {
		if(this1.scheme == null) {
			return this1.payload;
		} else {
			return "" + this1.scheme + ":" + this1.payload;
		}
	}
	static fromString(s) {
		return tink__$Url_Url_$Impl_$.parse(s);
	}
	static noop(_) {
	}
	static parse(s,onError) {
		if(s == null) {
			return tink__$Url_Url_$Impl_$.parse("");
		}
		if(onError == null) {
			onError = tink__$Url_Url_$Impl_$.noop;
		}
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"data:")) {
			var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null)};
			return this1;
		}
		var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
		var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
		FORMAT.match(s);
		var hosts;
		var _g = FORMAT.matched(7);
		if(_g == null) {
			hosts = [];
		} else {
			var v = _g;
			var _g1 = [];
			var _g11 = 0;
			var _g2 = v.split(",");
			while(_g11 < _g2.length) {
				var host = _g2[_g11];
				++_g11;
				HOST.match(host);
				var host1;
				var _g12 = HOST.matched(2);
				var _g21 = HOST.matched(3);
				if(_g12 == null) {
					var ipv4 = _g21;
					host1 = ipv4;
				} else if(_g21 == null) {
					var ipv6 = _g12;
					host1 = "[" + ipv6 + "]";
				} else {
					onError("invalid host " + host);
					host1 = null;
				}
				var port;
				var _g3 = HOST.matched(5);
				if(_g3 == null) {
					port = null;
				} else {
					var v1 = _g3;
					var _g31 = Std.parseInt(v1);
					if(_g31 == null) {
						onError("invalid port " + v1);
						port = null;
					} else {
						var p = _g31;
						port = p;
					}
				}
				_g1.push(tink_url__$Host_Host_$Impl_$._new(host1,port));
			}
			hosts = _g1;
		}
		var path = FORMAT.matched(8);
		if(hosts.length > 0 && path.charAt(0) != "/") {
			path = "/" + path;
		}
		var this2 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url__$Path_Path_$Impl_$.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
		return this2;
	}
	static make(parts) {
		var parts1 = { payload : "", path : parts.path, query : parts.query, host : parts.host, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
		tink__$Url_Url_$Impl_$.makePayload(parts1);
		var this1 = parts1;
		return this1;
	}
	static fromRepresentation(v) {
		return tink__$Url_Url_$Impl_$.parse(tink_json__$Representation_Representation_$Impl_$.get(v));
	}
	static toRepresentation(this1) {
		var this2 = tink__$Url_Url_$Impl_$.toString(this1);
		return this2;
	}
}
tink__$Url_Url_$Impl_$.__name__ = true;
class tink_url__$Host_Host_$Impl_$ {
	static _new(name,port) {
		var this1;
		if(port == null) {
			this1 = name;
		} else if(port > 65535 || port <= 0) {
			throw new js__$Boot_HaxeError("Invalid port");
		} else {
			this1 = "" + name + ":" + port;
		}
		return this1;
	}
	static get_name(this1) {
		if(this1 == null) {
			return null;
		} else {
			var _g = this1.split("]");
			switch(_g.length) {
			case 1:
				var v = _g[0];
				return v.split(":")[0];
			case 2:
				var _g3 = _g[1];
				var v1 = _g[0];
				return v1 + "]";
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
	}
	static get_port(this1) {
		if(this1 == null) {
			return null;
		} else {
			var _g = this1.split("]");
			switch(_g.length) {
			case 1:
				var v = _g[0];
				var _g1 = v.split(":")[1];
				if(_g1 == null) {
					return null;
				} else {
					var p = _g1;
					return Std.parseInt(p);
				}
				break;
			case 2:
				var _g2 = _g[0];
				var v1 = _g[1];
				var _g3 = v1.split(":")[1];
				if(_g3 == null) {
					return null;
				} else {
					var p1 = _g3;
					return Std.parseInt(p1);
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
	}
	static toString(this1) {
		return this1;
	}
}
tink_url__$Host_Host_$Impl_$.__name__ = true;
class tink_url__$Path_Path_$Impl_$ {
	static parts(this1) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this1.split("/");
		while(_g1 < _g2.length) {
			var p = _g2[_g1];
			++_g1;
			if(p != "") {
				var this2 = p;
				_g.push(this2);
			}
		}
		return _g;
	}
	static get_absolute(this1) {
		return this1.charAt(0) == "/";
	}
	static get_isDir(this1) {
		return this1.charAt(this1.length - 1) == "/";
	}
	static _new(s) {
		var this1 = s;
		return this1;
	}
	static join(this1,that) {
		if(that == "") {
			return this1;
		} else if(that.charAt(0) == "/") {
			return that;
		} else if(this1.charAt(this1.length - 1) == "/") {
			return tink_url__$Path_Path_$Impl_$.ofString(this1 + that);
		} else {
			var _g = this1.lastIndexOf("/");
			if(_g == -1) {
				return that;
			} else {
				var v = _g;
				return tink_url__$Path_Path_$Impl_$.ofString(HxOverrides.substr(this1,0,v + 1) + that);
			}
		}
	}
	static ofString(s) {
		var this1 = tink_url__$Path_Path_$Impl_$.normalize(s);
		return this1;
	}
	static normalize(s) {
		s = StringTools.trim(StringTools.replace(s,"\\","/"));
		if(s == ".") {
			return "./";
		}
		var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
		var parts = [];
		var isAbsolute = StringTools.startsWith(s,"/");
		var up = 0;
		var _g = 0;
		var _g1 = s.split("/");
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			var _g2 = StringTools.trim(part);
			switch(_g2) {
			case "":
				break;
			case ".":
				break;
			case "..":
				if(parts.pop() == null) {
					++up;
				}
				break;
			default:
				var v = _g2;
				parts.push(v);
			}
		}
		if(isAbsolute) {
			parts.unshift("");
		} else {
			var _g21 = 0;
			var _g3 = up;
			while(_g21 < _g3) {
				var i = _g21++;
				parts.unshift("..");
			}
		}
		if(isDir) {
			parts.push("");
		}
		return parts.join("/");
	}
	static toString(this1) {
		return this1;
	}
}
tink_url__$Path_Path_$Impl_$.__name__ = true;
class tink_core_NamedWith {
	constructor(name,value) {
		this.name = name;
		this.value = value;
	}
}
tink_core_NamedWith.__name__ = true;
Object.assign(tink_core_NamedWith.prototype, {
	__class__: tink_core_NamedWith
});
class tink_http_HeaderField extends tink_core_NamedWith {
	constructor(name,value) {
		super(name,value);
	}
	toString() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
	static ofString(s) {
		var _g = s.indexOf(":");
		if(_g == -1) {
			var this1 = s.toLowerCase();
			return new tink_http_HeaderField(this1,null);
		} else {
			var v = _g;
			var name = HxOverrides.substr(s,0,v);
			var this2 = name.toLowerCase();
			return new tink_http_HeaderField(this2,StringTools.trim(HxOverrides.substr(s,v + 1,null)));
		}
	}
	static setCookie(key,value,options) {
		if(options == null) {
			options = { };
		}
		var buf_b = "";
		buf_b += Std.string(encodeURIComponent(key) + "=" + encodeURIComponent(value));
		if(options.expires != null) {
			var value1 = tink_http__$Header_HeaderValue_$Impl_$.ofDate(options.expires);
			if(value1 != null) {
				buf_b += "; ";
				buf_b += "expires=";
				buf_b += Std.string(value1);
			}
		}
		var value2 = options.domain;
		if(value2 != null) {
			buf_b += "; ";
			buf_b += "domain=";
			buf_b += Std.string(value2);
		}
		var value3 = options.path;
		if(value3 != null) {
			buf_b += "; ";
			buf_b += "path=";
			buf_b += Std.string(value3);
		}
		if(options.secure) {
			buf_b += "; ";
			buf_b += "secure";
			buf_b += "";
		}
		if(options.scriptable != true) {
			buf_b += "; ";
			buf_b += "HttpOnly";
			buf_b += "";
		}
		return new tink_http_HeaderField("set-cookie",buf_b);
	}
}
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.__super__ = tink_core_NamedWith;
Object.assign(tink_http_HeaderField.prototype, {
	__class__: tink_http_HeaderField
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__ : true, __constructs__ : ["Plain","Parsed"]
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["parts"],$_)
};
class tink_streams_StreamObject {
}
tink_streams_StreamObject.__name__ = true;
Object.assign(tink_streams_StreamObject.prototype, {
	__class__: tink_streams_StreamObject
});
class tink_streams_StreamBase {
	constructor() {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.retainCount = 0;
	}
	get_depleted() {
		return false;
	}
	retain() {
		this.retainCount++;
		var retained = true;
		var _gthis = this;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	next() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	regroup(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	map(f) {
		return this.regroup(f);
	}
	filter(f) {
		return this.regroup(f);
	}
	destroy() {
	}
	append(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	prepend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	blend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	decompose(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	idealize(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	reduce(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g3 = c.rest;
					throw new js__$Boot_HaxeError("assert");
				case 1:
					var rest = c.at;
					var e1 = c.error;
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c.error;
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	forEach(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
Object.assign(tink_streams_StreamBase.prototype, {
	__class__: tink_streams_StreamBase
});
class tink_streams_Generator extends tink_streams_StreamBase {
	constructor(upcoming) {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			super();
			return;
		}
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(upcoming);
	}
	_hx_constructor(upcoming) {
		super._hx_constructor();
		this.upcoming = upcoming;
	}
	next() {
		return this.upcoming;
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s.e;
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e.e;
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	static stream(step) {
		return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
	}
}
tink_streams_Generator.__name__ = true;
tink_streams_Generator.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Generator.prototype, {
	__class__: tink_streams_Generator
});
class tink_io_nodejs_NodejsSource extends tink_streams_Generator {
	constructor(target) {
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			target.read().handle(function(o) {
				var tmp;
				switch(o._hx_index) {
				case 0:
					var _g = o.data;
					if(_g == null) {
						tmp = tink_streams_Step.End;
					} else {
						var chunk = _g;
						tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
					}
					break;
				case 1:
					var e = o.failure;
					tmp = tink_streams_Step.Fail(e);
					break;
				}
				cb(tmp);
			});
		},true));
	}
	static wrap(name,native,chunkSize,onEnd) {
		return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
	}
}
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_nodejs_NodejsSource.prototype, {
	__class__: tink_io_nodejs_NodejsSource
});
class tink_io_nodejs_WrappedReadable {
	constructor(name,native,chunkSize,onEnd) {
		this.name = name;
		this.native = native;
		this.chunkSize = chunkSize;
		this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(null));
			});
			native.once("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 21, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
				cb(tmp);
			});
		});
		if(onEnd != null) {
			this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
				process.nextTick(onEnd);
			}));
		}
	}
	read() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_io_nodejs_WrappedBuffer(buf));
						cb(attempt1);
					}
				} catch( e ) {
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 46, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			attempt();
		}),this.end);
	}
}
tink_io_nodejs_WrappedReadable.__name__ = true;
Object.assign(tink_io_nodejs_WrappedReadable.prototype, {
	__class__: tink_io_nodejs_WrappedReadable
});
class tink_core__$Future_FutureObject {
}
tink_core__$Future_FutureObject.__name__ = true;
Object.assign(tink_core__$Future_FutureObject.prototype, {
	__class__: tink_core__$Future_FutureObject
});
class tink_core__$Future_NeverFuture {
	constructor() {
	}
	map(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	flatMap(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	handle(callback) {
		return null;
	}
	gather() {
		return tink_core__$Future_NeverFuture.inst;
	}
	eager() {
		return tink_core__$Future_NeverFuture.inst;
	}
}
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_NeverFuture.prototype, {
	__class__: tink_core__$Future_NeverFuture
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
class tink_core__$Lazy_LazyObject {
}
tink_core__$Lazy_LazyObject.__name__ = true;
Object.assign(tink_core__$Lazy_LazyObject.prototype, {
	__class__: tink_core__$Lazy_LazyObject
});
class tink_core__$Lazy_LazyConst {
	constructor(value) {
		this.value = value;
	}
	get() {
		return this.value;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
}
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyConst.prototype, {
	__class__: tink_core__$Lazy_LazyConst
});
class tink_core__$Future_SyncFuture {
	constructor(value) {
		this.value = value;
	}
	map(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	flatMap(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	handle(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	eager() {
		return this;
	}
	gather() {
		return this;
	}
}
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_SyncFuture.prototype, {
	__class__: tink_core__$Future_SyncFuture
});
class tink_core__$Future_Future_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Future_SimpleFuture(f);
		return this1;
	}
	static first(this1,other) {
		var ret = new tink_core_FutureTrigger();
		var l1 = this1.handle($bind(ret,ret.trigger));
		var l2 = other.handle($bind(ret,ret.trigger));
		var ret1 = ret;
		if(l1 != null) {
			var this2 = l1;
			ret1.handle(function(_) {
				this2.cancel();
			});
		}
		if(l2 != null) {
			var this3 = l2;
			ret1.handle(function(_1) {
				this3.cancel();
			});
		}
		return ret1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.map(f);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatMap(this1,next,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(next);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static next(this1,n) {
		return this1.flatMap(function(v) {
			return n(v);
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(function(t) {
			var ret1 = other.map(function(a) {
				return merger(t,a);
			});
			return ret1;
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatten(f) {
		return new tink_core__$Future_NestedFuture(f);
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			promise.then(function(a) {
				cb(tink_core_Outcome.Success(a));
			}).catch(function(e) {
				var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 83, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
				cb(tmp);
			});
		});
	}
	static ofAny(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static asPromise(s) {
		return s;
	}
	static ofMany(futures,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
		var _g = 0;
		while(_g < futures.length) {
			var f = [futures[_g]];
			++_g;
			var ret1 = ret.flatMap((function(f1) {
				return function(results) {
					var ret2 = (function() {
						return function(result) {
							return results.concat([result]);
						};
					})();
					var ret3 = f1[0].map(ret2);
					return ret3;
				};
			})(f));
			ret = ret1;
		}
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static fromMany(futures) {
		return tink_core__$Future_Future_$Impl_$.ofMany(futures);
	}
	static lazy(l) {
		return new tink_core__$Future_SyncFuture(l);
	}
	static sync(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_LazyTrigger(f);
		} else {
			var op = new tink_core_FutureTrigger();
			var wrapped = f;
			tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
			return op;
		}
	}
	static or(a,b) {
		return tink_core__$Future_Future_$Impl_$.first(a,b);
	}
	static either(a,b) {
		var ret = a.map(haxe_ds_Either.Left);
		var ret1 = b.map(haxe_ds_Either.Right);
		return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
	}
	static and(a,b) {
		return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return this1;
		});
	}
	static _tryFailingFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return map(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var ret1 = map(d).map(tink_core_Outcome.Success);
				return ret1.gather();
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFailingMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
		});
		return ret.gather();
	}
	static _tryMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.map(o,map);
		});
		return ret.gather();
	}
	static _flatMap(f,map) {
		var ret = f.flatMap(map);
		return ret.gather();
	}
	static _map(f,map) {
		var ret = f.map(map);
		return ret.gather();
	}
	static trigger() {
		return new tink_core_FutureTrigger();
	}
	static delay(ms,value) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			haxe_Timer.delay(function() {
				cb(value.get());
			},ms);
		});
	}
}
tink_core__$Future_Future_$Impl_$.__name__ = true;
class tink_core_FutureTrigger {
	constructor() {
		if(tink_core_FutureTrigger._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		var this1 = [];
		this.list = this1;
	}
	handle(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	map(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	flatMap(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	gather() {
		return this;
	}
	eager() {
		return this;
	}
	asFuture() {
		return this;
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	static gatherFuture(f) {
		var op = null;
		var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
			if(op == null) {
				op = new tink_core_FutureTrigger();
				f.handle($bind(op,op.trigger));
				f = null;
			}
			return op.handle(cb);
		});
		return this1;
	}
}
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
});
class tink_core__$Future_LazyTrigger extends tink_core_FutureTrigger {
	constructor(op) {
		tink_core_FutureTrigger._hx_skip_constructor = true;
		super();
		tink_core_FutureTrigger._hx_skip_constructor = false;
		this._hx_constructor(op);
	}
	_hx_constructor(op) {
		if(op == null) {
			throw new js__$Boot_HaxeError("invalid argument");
		}
		this.op = op;
		super._hx_constructor();
	}
	eager() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	map(f) {
		var _gthis = this;
		if(this.op == null) {
			return super.map(f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	flatMap(f) {
		var _gthis = this;
		if(this.op == null) {
			return super.flatMap(f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	handle(cb) {
		this.eager();
		return super.handle(cb);
	}
}
tink_core__$Future_LazyTrigger.__name__ = true;
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
Object.assign(tink_core__$Future_LazyTrigger.prototype, {
	__class__: tink_core__$Future_LazyTrigger
});
class tink_core__$Callback_Callback_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static toFunction(this1) {
		return this1;
	}
	static invoke(this1,data) {
		if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
			tink_core__$Callback_Callback_$Impl_$.depth++;
			this1(data);
			tink_core__$Callback_Callback_$Impl_$.depth--;
		} else {
			var _e = this1;
			var f = function(data1) {
				tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
			};
			var data2 = data;
			tink_core__$Callback_Callback_$Impl_$.defer(function() {
				f(data2);
			});
		}
	}
	static ignore(cb) {
		return function(_) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
		};
	}
	static fromNiladic(f) {
		return f;
	}
	static fromMany(callbacks) {
		return function(v) {
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				tink_core__$Callback_Callback_$Impl_$.invoke(callback,v);
			}
		};
	}
	static defer(f) {
		process.nextTick(f);
	}
}
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.isTinkError = true;
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	throwSelf() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		var ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
	static ofJsError(e,pos) {
		return tink_core_TypedError.withData(500,e.message,e,pos);
	}
	static asError(v) {
		if(v != null && v.isTinkError) {
			return v;
		} else {
			return null;
		}
	}
	static catchExceptions(f,report,pos) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			var _g = tink_core_TypedError.asError(e1);
			var tmp;
			if(_g == null) {
				tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
			} else {
				var e2 = _g;
				tmp = e2;
			}
			return tink_core_Outcome.Failure(tmp);
		}
	}
	static reporter(code,message,pos) {
		return function(e) {
			return tink_core_TypedError.withData(code,message,e,pos);
		};
	}
	static rethrow(any) {
		throw js__$Boot_HaxeError.wrap(any);
	}
	static tryFinally(f,cleanup) {
		try { return f(); } finally { cleanup(); }
		return null;
	}
}
tink_core_TypedError.__name__ = true;
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
class tink_http_Message {
	constructor(header,body) {
		if(tink_http_Message._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(header,body);
	}
	_hx_constructor(header,body) {
		this.header = header;
		this.body = body;
	}
}
tink_http_Message.__name__ = true;
Object.assign(tink_http_Message.prototype, {
	__class__: tink_http_Message
});
class tink_http_IncomingRequest extends tink_http_Message {
	constructor(clientIp,header,body) {
		tink_http_Message._hx_skip_constructor = true;
		super();
		tink_http_Message._hx_skip_constructor = false;
		this._hx_constructor(clientIp,header,body);
	}
	_hx_constructor(clientIp,header,body) {
		this.clientIp = clientIp;
		super._hx_constructor(header,body);
	}
	static parse(clientIp,source) {
		return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.parse(source,tink_http_IncomingRequestHeader.parser()),function(parts) {
			var parts1 = parts.a;
			var _g = parts.a.getContentLength();
			var d;
			switch(_g._hx_index) {
			case 0:
				var len = _g.data;
				d = tink_io__$Source_Source_$Impl_$.limit(parts.b,len);
				break;
			case 1:
				var _g2 = _g.failure;
				var _g1 = parts.a.byName("transfer-encoding");
				switch(parts.a.method) {
				case "GET":case "OPTIONS":
					d = tink_io__$Source_Source_$Impl_$.EMPTY;
					break;
				default:
					if(_g1._hx_index == 0) {
						var encodings = _g1.data.split(",").map(StringTools.trim);
						if(encodings.indexOf("chunked") != -1) {
							var source1 = parts.b;
							d = tink_http_Chunked.decoder().transform(source1);
						} else {
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
						}
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
					}
				}
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingRequest(clientIp,parts1,tink_http_IncomingRequestBody.Plain(d)))));
		});
	}
}
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.__super__ = tink_http_Message;
Object.assign(tink_http_IncomingRequest.prototype, {
	__class__: tink_http_IncomingRequest
});
class tink_streams_Empty extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	get_depleted() {
		return true;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	static make() {
		return tink_streams_Empty.inst;
	}
}
tink_streams_Empty.__name__ = true;
tink_streams_Empty.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Empty.prototype, {
	__class__: tink_streams_Empty
});
class tink_io__$Source_Source_$Impl_$ {
	static dirty(this1) {
		return this1;
	}
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static ofNodeStream(name,r,options) {
		if(options == null) {
			options = { };
		}
		return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
	}
	static toNodeStream(this1) {
		var native = new js_node_stream_PassThrough();
		var source = tink_io__$Source_Source_$Impl_$.chunked(this1);
		var write = null;
		write = function() {
			source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(chunk) {
				var b = chunk.toBytes();
				var data = b.b;
				var ok = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
				var ok1 = native.write(ok);
				if(ok1) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
				}
			})).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					source = rest;
					native.once("drain",write);
					break;
				case 2:
					var e = o.error;
					native.emit("error",new Error(e.message));
					break;
				case 3:
					native.end();
					break;
				}
			});
		};
		write();
		return native;
	}
	static ofJsFile(name,file,options) {
		var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
		return new tink_io_js_BlobSource(name,file,0,chunkSize);
	}
	static ofJsBlob(name,blob,options) {
		var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
	static ofInput(name,input,options) {
		if(options == null) {
			options = { };
		}
		var tmp = tink_io__$Worker_Worker_$Impl_$.ensure(options.worker);
		var length;
		var _g = options.chunkSize;
		if(_g == null) {
			length = 65536;
		} else {
			var v = _g;
			length = v;
		}
		return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(length)),0);
	}
	static chunked(this1) {
		return this1;
	}
	static ofError(e) {
		return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
	}
	static ofFuture(f) {
		return tink_streams__$Stream_Stream_$Impl_$.flatten(f);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return s;
			case 1:
				var e = o.failure;
				return tink_io__$Source_Source_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static concatAll(s) {
		return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafe(function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur))));
		}));
	}
	static pipeTo(this1,target,options) {
		return target.consume(this1,options);
	}
	static append(this1,that) {
		return this1.append(that);
	}
	static prepend(this1,that) {
		return this1.prepend(that);
	}
	static transform(this1,transformer) {
		return transformer.transform(this1);
	}
	static skip(this1,len) {
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			var chunk = chunks[0];
			if(len <= 0) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(chunk));
			}
			var length = chunk.getLength();
			var out = tink_streams_RegroupResult.Converted(len < length ? tink_streams__$Stream_Stream_$Impl_$.single(chunk.slice(len,length)) : tink_streams_Empty.inst);
			len -= length;
			return out;
		}));
	}
	static limit(this1,len) {
		if(len == 0) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			if(len <= 0) {
				return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
			}
			var chunk = chunks[0];
			var length = chunk.getLength();
			var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams__$Stream_Stream_$Impl_$.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(len < length ? chunk.slice(0,len) : chunk));
			len -= length;
			return out;
		}));
	}
	static ofChunk(chunk) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
	}
	static ofString(s) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
	}
	static ofBytes(b) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
	}
}
tink_io__$Source_Source_$Impl_$.__name__ = true;
class tink_io_SinkObject {
}
tink_io_SinkObject.__name__ = true;
Object.assign(tink_io_SinkObject.prototype, {
	__class__: tink_io_SinkObject
});
class tink_io_SinkBase {
	get_sealed() {
		return true;
	}
	consume(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
Object.assign(tink_io_SinkBase.prototype, {
	__class__: tink_io_SinkBase
});
class tink_io_nodejs_NodejsSink extends tink_io_SinkBase {
	constructor(target) {
		super();
		this.target = target;
	}
	consume(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w._hx_index) {
				case 0:
					switch(w.data) {
					case false:
						return tink_streams_Handled.BackOff;
					case true:
						return tink_streams_Handled.Resume;
					}
					break;
				case 1:
					var e = w.failure;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
	static wrap(name,native) {
		return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
	}
}
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_nodejs_NodejsSink.prototype, {
	__class__: tink_io_nodejs_NodejsSink
});
class tink_io_nodejs_WrappedWritable {
	constructor(name,native) {
		this.name = name;
		this.native = native;
		this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("finish",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("close",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.on("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
				cb(tmp);
			});
		});
	}
	end() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	write(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis.native.write(buf,tmp);
		}),this.ended);
	}
}
tink_io_nodejs_WrappedWritable.__name__ = true;
Object.assign(tink_io_nodejs_WrappedWritable.prototype, {
	__class__: tink_io_nodejs_WrappedWritable
});
class tink_web_routing_Context {
	constructor(parent,accepts,request,depth,parts,params) {
		if(tink_web_routing_Context._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(parent,accepts,request,depth,parts,params);
	}
	_hx_constructor(parent,accepts,request,depth,parts,params) {
		this.parent = parent;
		this.accepts = accepts;
		this.request = request;
		this.depth = depth;
		this.parts = parts;
		this.params = params;
	}
	get_header() {
		return this.request.header;
	}
	allRaw() {
		var _g = this.request.body;
		var tmp;
		if(_g._hx_index == 0) {
			var s = _g.source;
			tmp = s;
		} else {
			tmp = tink_io__$Source_Source_$Impl_$.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
		return tink_io_RealSourceTools.all(tmp);
	}
	get_rawBody() {
		var _g = this.request.body;
		if(_g._hx_index == 0) {
			var s = _g.source;
			return s;
		} else {
			return tink_io__$Source_Source_$Impl_$.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
	}
	headers() {
		var _g = [];
		var f = HxOverrides.iter(this.request.header.fields);
		while(f.hasNext()) {
			var f1 = f.next();
			_g.push(new tink_core_NamedWith(tink_web_routing_Context.toCamelCase(f1.name),f1.value));
		}
		return tink_querystring__$Pairs_Pairs_$Impl_$.ofIterable(_g);
	}
	parse() {
		var _g = this.request.body;
		switch(_g._hx_index) {
		case 0:
			var src = _g.source;
			var parseForm = function() {
				return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(src),tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(chunk) {
					var _g1 = [];
					var part = new tink_url__$Query_QueryStringParser(chunk.toString(),"&","=",0);
					while(part.hasNext()) {
						var part1 = part.next();
						_g1.push(new tink_core_NamedWith(part1.name,tink_http_BodyPart.Value(tink_url__$Portion_Portion_$Impl_$.stringly(part1.value))));
					}
					return _g1;
				}));
			};
			return parseForm();
		case 1:
			var parts = _g.parts;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(parts)));
		}
	}
	get_pathLength() {
		return this.parts.length - this.depth;
	}
	getPrefix() {
		return this.parts.slice(0,this.depth);
	}
	getPath() {
		return this.parts.slice(this.depth);
	}
	hasParam(name) {
		var _this = this.params;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	part(index) {
		if(this.depth + index >= this.parts.length) {
			return "";
		} else {
			return tink_url__$Portion_Portion_$Impl_$.stringly(this.parts[this.depth + index]);
		}
	}
	param(name) {
		var _this = this.params;
		return tink_url__$Portion_Portion_$Impl_$.stringly(__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]);
	}
	sub(descend) {
		return new tink_web_routing_Context(this,this.accepts,this.request,this.depth + descend,this.parts,this.params);
	}
	static toCamelCase(header) {
		var header1 = header;
		var ret_b = "";
		var pos = 0;
		var max = header1.length;
		while(pos < max) {
			var _g = header1.charCodeAt(pos++);
			if(_g == 45) {
				if(pos < max) {
					ret_b += Std.string(header1.charAt(pos++).toLowerCase());
				}
			} else {
				var v = _g;
				ret_b += String.fromCodePoint(v);
			}
		}
		return ret_b;
	}
	static ofRequest(request) {
		return new tink_web_routing_Context(null,tink_web_routing_Context.parseAcceptHeader(request.header),request,0,tink_url__$Path_Path_$Impl_$.parts(request.header.url.path),tink_url__$Query_Query_$Impl_$.toMap(request.header.url.query));
	}
	static authed(request,getSession) {
		var tmp = tink_web_routing_Context.parseAcceptHeader(request.header);
		var tmp1 = tink_url__$Path_Path_$Impl_$.parts(request.header.url.path);
		var tmp2 = tink_url__$Query_Query_$Impl_$.toMap(request.header.url.query);
		var f = getSession;
		var a1 = request.header;
		return new tink_web_routing_AuthedContext(null,tmp,request,0,tmp1,tmp2,new tink_core__$Lazy_LazyFunc(function() {
			return f(a1);
		}));
	}
	static parseAcceptHeader(h) {
		var _g = h.get("accept");
		if(_g.length == 0) {
			return tink_web_routing_Context.acceptsAll;
		} else {
			var values = _g;
			var _g1 = new haxe_ds_StringMap();
			var _g11 = 0;
			while(_g11 < values.length) {
				var v = values[_g11];
				++_g11;
				var _g12 = 0;
				var _g2 = tink_http__$Header_HeaderValue_$Impl_$.parse(v);
				while(_g12 < _g2.length) {
					var part = _g2[_g12];
					++_g12;
					var key = part.value;
					if(__map_reserved[key] != null) {
						_g1.setReserved(key,true);
					} else {
						_g1.h[key] = true;
					}
				}
			}
			var accepted = _g1;
			if(__map_reserved["*/*"] != null ? accepted.getReserved("*/*") : accepted.h["*/*"]) {
				return tink_web_routing_Context.acceptsAll;
			} else {
				return function(t) {
					if(__map_reserved[t] != null) {
						return accepted.existsReserved(t);
					} else {
						return accepted.h.hasOwnProperty(t);
					}
				};
			}
		}
	}
	static acceptsAll(s) {
		return true;
	}
}
tink_web_routing_Context.__name__ = true;
Object.assign(tink_web_routing_Context.prototype, {
	__class__: tink_web_routing_Context
});
class tink_http__$Header_HeaderValue_$Impl_$ {
	static getExtension(this1) {
		return tink_http__$Header_HeaderValue_$Impl_$.parse(this1)[0].extensions;
	}
	static parse(this1) {
		return tink_http__$Header_HeaderValue_$Impl_$.parseWith(this1,function(_,params) {
			var _g = new haxe_ds_StringMap();
			var p = params;
			while(p.hasNext()) {
				var p1 = p.next();
				var key = p1.name;
				var value;
				var _g1 = tink_url__$Portion_Portion_$Impl_$.toString(p1.value);
				var quoted = _g1;
				if(HxOverrides.cca(quoted,0) == 34) {
					value = HxOverrides.substr(quoted,1,quoted.length - 2);
				} else {
					var v = _g1;
					value = v;
				}
				if(__map_reserved[key] != null) {
					_g.setReserved(key,value);
				} else {
					_g.h[key] = value;
				}
			}
			return _g;
		});
	}
	static parseWith(this1,parseExtension) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this1.split(",");
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			v = StringTools.trim(v);
			var i;
			var _g11 = v.indexOf(";");
			if(_g11 == -1) {
				i = v.length;
			} else {
				var i1 = _g11;
				i = i1;
			}
			var value = HxOverrides.substr(v,0,i);
			_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,";","=",i + 1))});
		}
		return _g;
	}
	static basicAuth(username,password) {
		return "Basic " + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString("" + username + ":" + password)).toString();
	}
	static ofDate(d) {
		return DateTools.format(d,tink_http__$Header_HeaderValue_$Impl_$.DAYS[d.getDay()] + ", %d " + tink_http__$Header_HeaderValue_$Impl_$.MONTHS[d.getMonth()] + " %Y %H:%M:%S GMT");
	}
	static ofInt(i) {
		if(i == null) {
			return "null";
		} else {
			return "" + i;
		}
	}
}
tink_http__$Header_HeaderValue_$Impl_$.__name__ = true;
class tink_url__$Query_QueryStringParser {
	constructor(s,sep,set,pos) {
		this.s = s == null ? "" : s;
		this.sep = sep;
		this.set = set;
		this.pos = pos;
	}
	hasNext() {
		return this.pos < this.s.length;
	}
	next() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url__$Portion_Portion_$Impl_$.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	static trimmedSub(s,start,end) {
		if(start >= s.length) {
			var this1 = "";
			return this1;
		}
		while(s.charCodeAt(start) < 33) ++start;
		if(end < s.length - 1) {
			while(s.charCodeAt(end - 1) < 33) --end;
		}
		var this2 = s.substring(start,end);
		return this2;
	}
}
tink_url__$Query_QueryStringParser.__name__ = true;
Object.assign(tink_url__$Query_QueryStringParser.prototype, {
	__class__: tink_url__$Query_QueryStringParser
});
class tink_url__$Portion_Portion_$Impl_$ {
	static get_raw(this1) {
		return this1;
	}
	static _new(v) {
		var this1 = v;
		return this1;
	}
	static stringly(this1) {
		return tink_url__$Portion_Portion_$Impl_$.toString(this1);
	}
	static toString(this1) {
		if(this1 == null) {
			return null;
		} else {
			return decodeURIComponent(this1.split("+").join(" "));
		}
	}
	static ofString(s) {
		var this1 = s == null ? "" : encodeURIComponent(s);
		return this1;
	}
}
tink_url__$Portion_Portion_$Impl_$.__name__ = true;
class tink_url__$Query_Query_$Impl_$ {
	static parse(this1) {
		return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	}
	static with(this1,values) {
		var this2 = [];
		var ret = this2;
		var _g = [];
		var key = values.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		var insert = _g;
		var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
		while(p.hasNext()) {
			var p1 = p.next();
			if(values.exists(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name))) {
				ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name) + "=" + values.get(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name)));
				HxOverrides.remove(insert,tink_url__$Portion_Portion_$Impl_$.ofString(p1.name));
			} else {
				ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name) + "=" + p1.value);
			}
		}
		var _g1 = 0;
		while(_g1 < insert.length) {
			var name = insert[_g1];
			++_g1;
			ret.push(name + "=" + values.get(name));
		}
		return ret.join("&");
	}
	static iterator(this1) {
		return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	}
	static toMap(this1) {
		var _g = new haxe_ds_StringMap();
		var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
		while(p.hasNext()) {
			var p1 = p.next();
			var key = p1.name.toString();
			var value = p1.value;
			if(__map_reserved[key] != null) {
				_g.setReserved(key,value);
			} else {
				_g.h[key] = value;
			}
		}
		return _g;
	}
	static ofObj(v) {
		var this1 = [];
		var ret = this1;
		var v1 = v;
		var _g = 0;
		var _g1 = Reflect.fields(v1);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(k) + "=" + tink_url__$Portion_Portion_$Impl_$.ofString(v1[k]));
		}
		return ret.join("&");
	}
	static toString(this1) {
		return this1;
	}
	static build() {
		var this1 = [];
		return this1;
	}
	static parseString(s,sep,set,pos) {
		if(pos == null) {
			pos = 0;
		}
		if(set == null) {
			set = "=";
		}
		if(sep == null) {
			sep = "&";
		}
		return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
	}
}
tink_url__$Query_Query_$Impl_$.__name__ = true;
class tink_core__$Promise_Recover_$Impl_$ {
	static ofSync(f) {
		return function(e) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
		};
	}
}
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
class tink_http__$Response_OutgoingResponse_$Impl_$ {
	static _new(header,body) {
		var this1 = new tink_http__$Response_OutgoingResponseData(header,body);
		return this1;
	}
	static blob(code,chunk,contentType,headers) {
		if(code == null) {
			code = 200;
		}
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
		var this2 = "Content-Type".toLowerCase();
		var fields = new tink_http_HeaderField(this2,contentType);
		var this3 = "Content-Length".toLowerCase();
		var fields1 = Std.string(chunk.getLength());
		var fields2;
		if(headers == null) {
			fields2 = [];
		} else {
			var v = headers;
			fields2 = v;
		}
		var this4 = new tink_http_ResponseHeaderBase(code,this1,[fields,new tink_http_HeaderField(this3,fields1)].concat(fields2),"HTTP/1.1");
		var this5 = new tink_http__$Response_OutgoingResponseData(this4,new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk)));
		return this5;
	}
	static chunked(contentType,headers,source) {
	}
	static ofString(s) {
		return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s)),"text/plain");
	}
	static ofChunk(c) {
		return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,c,"application/octet-stream");
	}
	static reportError(e) {
		var code = e.code;
		if(code < 100 || code > 999) {
			code = 500;
		}
		var reason = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
		var this1 = "Content-Type".toLowerCase();
		var this2 = new tink_http_ResponseHeaderBase(code,reason,[new tink_http_HeaderField(this1,"application/json")],"HTTP/1.1");
		var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
		return this3;
	}
}
tink_http__$Response_OutgoingResponse_$Impl_$.__name__ = true;
class tink_http_ResponseHeaderBase extends tink_http_Header {
	constructor(statusCode,reason,fields,protocol) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		tink_http_Header._hx_skip_constructor = true;
		super();
		tink_http_Header._hx_skip_constructor = false;
		this._hx_constructor(statusCode,reason,fields,protocol);
	}
	_hx_constructor(statusCode,reason,fields,protocol) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		this.statusCode = statusCode;
		var tmp;
		if(reason == null) {
			var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(statusCode);
			tmp = this1;
		} else {
			tmp = reason;
		}
		this.reason = tmp;
		this.protocol = protocol;
		super._hx_constructor(fields);
	}
	concat(fields) {
		var this1 = new tink_http_ResponseHeaderBase(this.statusCode,this.reason,this.fields.concat(fields),this.protocol);
		return this1;
	}
	toString() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + super.toString();
	}
	static parser() {
		return new tink_http_HeaderParser(function(line,headers) {
			var v = line.split(" ");
			if(v.length >= 3) {
				var this1 = new tink_http_ResponseHeaderBase(Std.parseInt(v[1]),v.slice(2).join(" "),headers,v[0]);
				return tink_core_Outcome.Success(this1);
			} else {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP response header",{ fileName : "tink/http/Response.hx", lineNumber : 56, className : "tink.http.ResponseHeaderBase", methodName : "parser"}));
			}
		});
	}
}
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
Object.assign(tink_http_ResponseHeaderBase.prototype, {
	__class__: tink_http_ResponseHeaderBase
});
class tink_chunk_ChunkBase {
	getCursor() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	flatten(into) {
	}
}
tink_chunk_ChunkBase.__name__ = true;
Object.assign(tink_chunk_ChunkBase.prototype, {
	__class__: tink_chunk_ChunkBase
});
class tink_chunk_ChunkObject {
}
tink_chunk_ChunkObject.__name__ = true;
Object.assign(tink_chunk_ChunkObject.prototype, {
	__class__: tink_chunk_ChunkObject
});
class tink_chunk_ByteChunk extends tink_chunk_ChunkBase {
	constructor(data,from,to) {
		super();
		this.data = data;
		this.from = from;
		this.to = to;
	}
	get_wrapped() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	getByte(index) {
		return this.data.bytes[this.from + index];
	}
	flatten(into) {
		into.push(this);
	}
	getLength() {
		return this.to - this.from;
	}
	getSlice(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	slice(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	blitTo(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	toBytes() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	toString() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	static of(b) {
		if(b.length == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
		ret.wrapped = b;
		return ret;
	}
}
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_ByteChunk.prototype, {
	__class__: tink_chunk_ByteChunk
});
class tink__$Chunk_EmptyChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getLength() {
		return 0;
	}
	slice(from,to) {
		return this;
	}
	blitTo(target,offset) {
	}
	toString() {
		return "";
	}
	toBytes() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
}
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_EmptyChunk.prototype, {
	__class__: tink__$Chunk_EmptyChunk
});
class tink__$Chunk_Chunk_$Impl_$ {
	static get_length(this1) {
		return this1.getLength();
	}
	static concat(this1,that) {
		var _g = that.getLength();
		if(this1.getLength() == 0) {
			if(_g == 0) {
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			} else {
				return that;
			}
		} else if(_g == 0) {
			return this1;
		} else {
			return new tink__$Chunk_CompoundChunk(this1,that);
		}
	}
	static cursor(this1) {
		return this1.getCursor();
	}
	static iterator(this1) {
		return new tink_chunk_ChunkIterator(this1.getCursor());
	}
	static slice(this1,from,to) {
		return this1.slice(from,to);
	}
	static blitTo(this1,target,offset) {
		this1.blitTo(target,offset);
		return;
	}
	static toHex(this1) {
		return this1.toBytes().toHex();
	}
	static toString(this1) {
		return this1.toString();
	}
	static toBytes(this1) {
		return this1.toBytes();
	}
	static join(chunks) {
		if(chunks == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			switch(chunks.length) {
			case 0:
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			case 1:
				var v = chunks[0];
				return v;
			default:
				var v1 = chunks;
				var ret = tink__$Chunk_Chunk_$Impl_$.catChunk(v1[0],v1[1]);
				var _g = 2;
				var _g1 = v1.length;
				while(_g < _g1) {
					var i = _g++;
					ret = tink__$Chunk_Chunk_$Impl_$.catChunk(ret,v1[i]);
				}
				return ret;
			}
		}
	}
	static ofBytes(b) {
		return tink_chunk_ByteChunk.of(b);
	}
	static ofString(s) {
		return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
	}
	static ofHex(s) {
		var length = s.length >> 1;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
		}
		return tink_chunk_ByteChunk.of(bytes);
	}
	static catChunk(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
	}
	static rcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
	}
	static lcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
	}
	static lcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(a),b);
	}
	static rcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(b));
	}
}
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
class tink_streams_Single extends tink_streams_StreamBase {
	constructor(value) {
		super();
		this.value = value;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	forEach(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
}
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Single.prototype, {
	__class__: tink_streams_Single
});
class tink_http__$Response_OutgoingResponseData extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
}
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
Object.assign(tink_http__$Response_OutgoingResponseData.prototype, {
	__class__: tink_http__$Response_OutgoingResponseData
});
class tink_http_HandlerObject {
}
tink_http_HandlerObject.__name__ = true;
Object.assign(tink_http_HandlerObject.prototype, {
	__class__: tink_http_HandlerObject
});
class tink_http_SimpleHandler {
	constructor(f) {
		this.f = f;
	}
	process(req) {
		return this.f(req);
	}
}
tink_http_SimpleHandler.__name__ = true;
tink_http_SimpleHandler.__interfaces__ = [tink_http_HandlerObject];
Object.assign(tink_http_SimpleHandler.prototype, {
	__class__: tink_http_SimpleHandler
});
class server_TinkAPI {
}
server_TinkAPI.__name__ = true;
class server_externs_express__$Route_Route_$Impl_$ {
	static fromEReg(e) {
		return e.r;
	}
}
server_externs_express__$Route_Route_$Impl_$.__name__ = true;
class tink__$Chunk_CompoundChunk extends tink_chunk_ChunkBase {
	constructor(left,right) {
		super();
		this.left = left;
		this.right = right;
		this.split = left.getLength();
		this.length = this.split + right.getLength();
	}
	getLength() {
		return this.length;
	}
	flatten(into) {
		this.left.flatten(into);
		this.right.flatten(into);
	}
	slice(from,to) {
		return tink__$Chunk_Chunk_$Impl_$.concat(this.left.slice(from,to),this.right.slice(from - this.split,to - this.split));
	}
	blitTo(target,offset) {
		this.left.blitTo(target,offset);
		this.right.blitTo(target,offset + this.split);
	}
	toString() {
		return this.toBytes().toString();
	}
	toBytes() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
}
tink__$Chunk_CompoundChunk.__name__ = true;
tink__$Chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_CompoundChunk.prototype, {
	__class__: tink__$Chunk_CompoundChunk
});
class tink__$Stringly_Stringly_$Impl_$ {
	static isNumber(s,allowFloat) {
		if(s.length == 0) {
			return false;
		}
		var pos = 0;
		var max = s.length;
		if(pos < max && s.charCodeAt(pos) == 45) {
			++pos;
		}
		if(!allowFloat) {
			if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
				if(pos < max && s.charCodeAt(pos) == 120) {
					++pos;
				}
			}
		}
		while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		if(allowFloat && pos < max) {
			if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
				while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
			}
			if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
				if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
					if(pos < max && s.charCodeAt(pos) == 45) {
						++pos;
					}
				}
				while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
			}
		}
		return pos == max;
	}
	static toBool(this1) {
		if(this1 != null) {
			switch(StringTools.trim(this1).toLowerCase()) {
			case "0":case "false":case "no":
				return false;
			default:
				return true;
			}
		} else {
			return false;
		}
	}
	static parseFloat(this1) {
		var _g = StringTools.trim(this1);
		var v = _g;
		if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,true)) {
			return tink_core_Outcome.Success(parseFloat(v));
		} else {
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 60, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
		}
	}
	static toFloat(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseFloat(this1));
	}
	static parseInt(this1) {
		var _g = StringTools.trim(this1);
		var v = _g;
		if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,false)) {
			return tink_core_Outcome.Success(Std.parseInt(v));
		} else {
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 71, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
		}
	}
	static toInt(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseInt(this1));
	}
	static parseDate(this1) {
		var _g = tink__$Stringly_Stringly_$Impl_$.parseFloat(this1);
		switch(_g._hx_index) {
		case 0:
			var f = _g.data;
			return tink_core_Outcome.Success(new Date(f));
		case 1:
			var _g2 = _g.failure;
			if(!tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX.match(this1)) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 92, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
			}
			var date = new Date(this1);
			if(isNaN(date.getTime())) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 95, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
			} else {
				return tink_core_Outcome.Success(date);
			}
			break;
		}
	}
	static toDate(this1) {
		return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseDate(this1));
	}
	static parse(this1,f) {
		var f1 = f;
		var a1 = this1;
		return tink_core_TypedError.catchExceptions(function() {
			return f1(a1);
		},null,{ fileName : "tink/Stringly.hx", lineNumber : 155, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
	}
	static ofBool(b) {
		if(b) {
			return "true";
		} else {
			return "false";
		}
	}
	static ofInt(i) {
		if(i == null) {
			return "null";
		} else {
			return "" + i;
		}
	}
	static ofFloat(f) {
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
	static ofDate(d) {
		var f = d.getTime();
		if(f == null) {
			return "null";
		} else {
			return "" + f;
		}
	}
}
tink__$Stringly_Stringly_$Impl_$.__name__ = true;
class tink_chunk_ChunkCursor {
	constructor() {
		this.currentByte = -1;
		this.currentPos = 0;
		this.length = 0;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPartIndex = 0;
	}
	clone() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	reset() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		}
	}
	flush() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	prune() {
		this.shift();
	}
	add(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	shift(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g1 = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				var rest = _g1;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	clear() {
		this.parts = [];
		this.reset();
	}
	left() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink__$Chunk_Chunk_$Impl_$.join(left);
	}
	right() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink__$Chunk_Chunk_$Impl_$.join(right);
	}
	seek(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else {
									var _g2 = options.withoutPruning;
									if(_g2 == null) {
										_gthis.shift();
									} else if(_g2 == false) {
										_gthis.shift();
									}
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g3 = part(this.curPart,this.curOffset);
		if(_g3._hx_index == 1) {
			var _g4 = this.curPartIndex + 1;
			var _g11 = this.parts.length;
			while(_g4 < _g11) {
				var i1 = _g4++;
				var _g5 = part(this.parts[i1],0);
				switch(_g5._hx_index) {
				case 0:
					var v = _g5.v;
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v1 = _g3;
			return v1;
		}
	}
	sweep(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	sweepTo(pos) {
		return this.sweep(pos - this.currentPos);
	}
	moveBy(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	moveTo(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	ffwd() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	next() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		} else {
			var _this2 = this.curPart;
			this.currentByte = _this2.data.bytes[_this2.from + ++this.curOffset];
		}
		return true;
	}
	static create(parts) {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = parts;
		ret.reset();
		return ret;
	}
}
tink_chunk_ChunkCursor.__name__ = true;
Object.assign(tink_chunk_ChunkCursor.prototype, {
	__class__: tink_chunk_ChunkCursor
});
class tink_chunk_ChunkIterator {
	constructor(target) {
		this.target = target;
		this._hasNext = target.length > target.currentPos;
	}
	hasNext() {
		return this._hasNext;
	}
	next() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
}
tink_chunk_ChunkIterator.__name__ = true;
Object.assign(tink_chunk_ChunkIterator.prototype, {
	__class__: tink_chunk_ChunkIterator
});
class tink_chunk__$Seekable_Seekable_$Impl_$ {
	static _new(a) {
		var this1 = a;
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,index) {
		return this1[index];
	}
	static ofChunk(c) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(c.toBytes());
	}
	static ofBytes(b) {
		var _g = [];
		var _g1 = 0;
		var _g2 = b.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(b.b[i]);
		}
		var this1 = _g;
		return this1;
	}
	static ofString(s) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
	}
}
tink_chunk__$Seekable_Seekable_$Impl_$.__name__ = true;
class tink_core_Annex {
	constructor(target) {
		this.target = target;
		this.registry = new haxe_ds_ObjectMap();
	}
}
tink_core_Annex.__name__ = true;
Object.assign(tink_core_Annex.prototype, {
	__class__: tink_core_Annex
});
class tink_core__$Callback_LinkObject {
}
tink_core__$Callback_LinkObject.__name__ = true;
Object.assign(tink_core__$Callback_LinkObject.prototype, {
	__class__: tink_core__$Callback_LinkObject
});
class tink_core__$Callback_CallbackLink_$Impl_$ {
	static _new(link) {
		var this1 = new tink_core__$Callback_SimpleLink(link);
		return this1;
	}
	static cancel(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static dissolve(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static noop() {
	}
	static toFunction(this1) {
		if(this1 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return $bind(this1,this1.cancel);
		}
	}
	static toCallback(this1) {
		return function(_) {
			this1.cancel();
		};
	}
	static fromFunction(f) {
		var this1 = new tink_core__$Callback_SimpleLink(f);
		return this1;
	}
	static join(a,b) {
		return new tink_core__$Callback_LinkPair(a,b);
	}
	static fromMany(callbacks) {
		var this1 = new tink_core__$Callback_SimpleLink(function() {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		});
		return this1;
	}
}
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
class tink_core__$Callback_SimpleLink {
	constructor(f) {
		this.f = f;
	}
	cancel() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
}
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
Object.assign(tink_core__$Callback_SimpleLink.prototype, {
	__class__: tink_core__$Callback_SimpleLink
});
class tink_core__$Callback_LinkPair {
	constructor(a,b) {
		this.dissolved = false;
		this.a = a;
		this.b = b;
	}
	cancel() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
}
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
Object.assign(tink_core__$Callback_LinkPair.prototype, {
	__class__: tink_core__$Callback_LinkPair
});
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw new js__$Boot_HaxeError("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	invoke(data) {
		if(this.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	clear() {
		this.list = null;
		this.cb = null;
	}
	cancel() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
}
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
});
class tink_core__$Callback_CallbackList_$Impl_$ {
	static _new() {
		var this1 = [];
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static add(this1,cb) {
		var node = new tink_core__$Callback_ListCell(cb,this1);
		this1.push(node);
		return node;
	}
	static invoke(this1,data) {
		var _g = 0;
		var _g1 = this1.slice();
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.cb != null) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
			}
		}
	}
	static clear(this1) {
		var _g = 0;
		var _g1 = this1.splice(0,this1.length);
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.clear();
		}
	}
	static invokeAndClear(this1,data) {
		var _g = 0;
		var _g1 = this1.splice(0,this1.length);
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.cb != null) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
			}
		}
	}
}
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
class tink_core__$Error_Stack_$Impl_$ {
	static toString(this1) {
		return "Error stack not available. Compile with -D error_stack.";
	}
}
tink_core__$Error_Stack_$Impl_$.__name__ = true;
class tink_core__$Future_SimpleFuture {
	constructor(f) {
		this.f = f;
	}
	handle(callback) {
		return this.f(callback);
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	flatMap(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	gather() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	eager() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
}
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_SimpleFuture.prototype, {
	__class__: tink_core__$Future_SimpleFuture
});
class tink_core__$Future_NestedFuture {
	constructor(outer) {
		this.outer = outer;
	}
	map(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	flatMap(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	gather() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	eager() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	handle(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
}
tink_core__$Future_NestedFuture.__name__ = true;
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_NestedFuture.prototype, {
	__class__: tink_core__$Future_NestedFuture
});
class tink_core_JsPromiseTools {
	static toSurprise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static toPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
}
tink_core_JsPromiseTools.__name__ = true;
class tink_core__$Lazy_Lazy_$Impl_$ {
	static get(this1) {
		return this1.get();
	}
	static ofFunc(f) {
		return new tink_core__$Lazy_LazyFunc(f);
	}
	static map(this1,f) {
		return this1.map(f);
	}
	static flatMap(this1,f) {
		return this1.flatMap(f);
	}
	static ofConst(c) {
		return new tink_core__$Lazy_LazyConst(c);
	}
}
tink_core__$Lazy_Lazy_$Impl_$.__name__ = true;
class tink_core__$Lazy_LazyFunc {
	constructor(f) {
		this.busy = false;
		this.f = f;
	}
	get() {
		if(this.busy) {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(null,"circular lazyness",{ fileName : "tink/core/Lazy.hx", lineNumber : 52, className : "tink.core._Lazy.LazyFunc", methodName : "get"}));
		}
		if(this.f != null) {
			this.busy = true;
			this.result = this.f();
			this.f = null;
			this.busy = false;
		}
		return this.result;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
}
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyFunc.prototype, {
	__class__: tink_core__$Lazy_LazyFunc
});
class tink_core_OptionTools {
	static force(o,pos) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
		}
	}
	static or(o,l) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return l.get();
		}
	}
	static orNull(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return null;
		}
	}
	static filter(o,f) {
		if(o._hx_index == 0) {
			if(f(o.v) == false) {
				return haxe_ds_Option.None;
			} else {
				return o;
			}
		} else {
			return o;
		}
	}
	static satisfies(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return false;
		}
	}
	static equals(o,v) {
		if(o._hx_index == 0) {
			var v1 = o.v;
			return v1 == v;
		} else {
			return false;
		}
	}
	static map(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return haxe_ds_Option.Some(f(v));
		} else {
			return haxe_ds_Option.None;
		}
	}
	static flatMap(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static iterator(o) {
		return new tink_core_OptionIter(o);
	}
	static toArray(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return [v];
		} else {
			return [];
		}
	}
}
tink_core_OptionTools.__name__ = true;
class tink_core_OptionIter {
	constructor(o) {
		this.alive = true;
		if(o._hx_index == 0) {
			var v = o.v;
			this.value = v;
		} else {
			this.alive = false;
		}
	}
	hasNext() {
		return this.alive;
	}
	next() {
		this.alive = false;
		return this.value;
	}
}
tink_core_OptionIter.__name__ = true;
Object.assign(tink_core_OptionIter.prototype, {
	__class__: tink_core_OptionIter
});
class tink_core_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var failure = outcome.failure;
			var _g = tink_core_TypedError.asError(failure);
			if(_g == null) {
				throw new js__$Boot_HaxeError(failure);
			} else {
				var e = _g;
				return e.throwSelf();
			}
			break;
		}
	}
	static toOption(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return haxe_ds_Option.Some(data);
		case 1:
			var _g1 = outcome.failure;
			return haxe_ds_Option.None;
		}
	}
	static toOutcome(option,pos) {
		switch(option._hx_index) {
		case 0:
			var value = option.v;
			return tink_core_Outcome.Success(value);
		case 1:
			return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
		}
	}
	static orNull(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return null;
		}
	}
	static orUse(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static orTry(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var _g = outcome.data;
			return outcome;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static equals(outcome,to) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data == to;
		case 1:
			var _g1 = outcome.failure;
			return false;
		}
	}
	static map(outcome,transform) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(transform(a));
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static isSuccess(outcome) {
		if(outcome._hx_index == 0) {
			var _g = outcome.data;
			return true;
		} else {
			return false;
		}
	}
	static flatMap(o,mapper) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
	}
	static swap(outcome,v) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(v);
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static attempt(f,report) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			return tink_core_Outcome.Failure(report(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
	}
	static flatten(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f = _g.failure;
				return tink_core_Outcome.Failure(f);
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	}
}
tink_core_OutcomeTools.__name__ = true;
class tink_core__$Outcome_OutcomeMapper_$Impl_$ {
	static _new(f) {
		var this1 = { f : f};
		return this1;
	}
	static apply(this1,o) {
		return this1.f(o);
	}
	static withSameError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return tink_core_Outcome.Failure(f1);
			}
		});
	}
	static withEitherError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var _g = f(d);
				switch(_g._hx_index) {
				case 0:
					var d1 = _g.data;
					return tink_core_Outcome.Success(d1);
				case 1:
					var f1 = _g.failure;
					return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
				}
				break;
			case 1:
				var f2 = o.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
			}
		});
	}
}
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = true;
class tink_core__$Pair_Pair_$Impl_$ {
	static _new(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	}
	static get_a(this1) {
		return this1.a;
	}
	static get_b(this1) {
		return this1.b;
	}
	static toBool(this1) {
		return this1 != null;
	}
	static isNil(this1) {
		return this1 == null;
	}
	static nil() {
		return null;
	}
}
tink_core__$Pair_Pair_$Impl_$.__name__ = true;
class tink_core_MPair {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
tink_core_MPair.__name__ = true;
Object.assign(tink_core_MPair.prototype, {
	__class__: tink_core_MPair
});
class tink_core__$Promise_Promise_$Impl_$ {
	static _new(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		var this1 = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			f(function(v) {
				cb(tink_core_Outcome.Success(v));
			},function(e) {
				cb(tink_core_Outcome.Failure(e));
			});
		},lazy);
		return this1;
	}
	static eager(this1) {
		return this1.eager();
	}
	static map(this1,f) {
		var ret = this1.map(f);
		return ret.gather();
	}
	static flatMap(this1,f) {
		var ret = this1.flatMap(f);
		return ret.gather();
	}
	static tryRecover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static recover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static mapError(this1,f) {
		var ret = this1.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				return o;
			case 1:
				var e = o.failure;
				return tink_core_Outcome.Failure(f(e));
			}
		});
		return ret.gather();
	}
	static handle(this1,cb) {
		return this1.handle(cb);
	}
	static noise(this1) {
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
		});
	}
	static isSuccess(this1) {
		var ret = this1.map(function(o) {
			return tink_core_OutcomeTools.isSuccess(o);
		});
		return ret.gather();
	}
	static next(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static swap(this1,v) {
		return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
			return v;
		});
	}
	static swapError(this1,e) {
		return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
			return e;
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
			return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
				return merger(t,a);
			},false);
		},gather);
	}
	static and(a,b) {
		return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
		});
	}
	static iterate(promises,$yield,fallback,lazy) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var iter = $getIterator(promises);
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					iter.next().handle(function(o) {
						switch(o._hx_index) {
						case 0:
							var v = o.data;
							$yield(v).handle(function(o1) {
								switch(o1._hx_index) {
								case 0:
									var _g = o1.data;
									switch(_g._hx_index) {
									case 0:
										var ret = _g.v;
										cb(tink_core_Outcome.Success(ret));
										break;
									case 1:
										next();
										break;
									}
									break;
								case 1:
									var e = o1.failure;
									cb(tink_core_Outcome.Failure(e));
									break;
								}
							});
							break;
						case 1:
							var e1 = o.failure;
							cb(tink_core_Outcome.Failure(e1));
							break;
						}
					});
				} else {
					fallback.handle(cb);
				}
			};
			next();
		},lazy);
	}
	static retry(gen,next) {
		var stamp = function() {
			return Date.now() / 1000 * 1000;
		};
		var start = stamp();
		var attempt = null;
		attempt = function(count) {
			var f = function(error) {
				var f1 = stamp() - start;
				return tink_core__$Promise_Promise_$Impl_$.next(next({ attempt : count, error : error, elapsed : f1}),function(_) {
					return attempt(count + 1);
				});
			};
			var ret = gen().flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		};
		return attempt(1);
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static ofSpecific(s) {
		return s;
	}
	static ofFuture(f) {
		var ret = f.map(tink_core_Outcome.Success);
		return ret.gather();
	}
	static ofOutcome(o) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
	}
	static ofError(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
	static ofData(d) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
	}
	static lazy(p) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			p.get().handle(cb);
		},true);
	}
	static inParallel(a,concurrency,lazy) {
		if(a.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var result = [];
				var pending = a.length;
				var links = null;
				var linkArray = [];
				var sync = false;
				var i = 0;
				var iter = HxOverrides.iter(a);
				var next = null;
				var done = function(o) {
					if(links == null) {
						sync = true;
					} else if(links != null) {
						links.cancel();
					}
					cb(o);
				};
				var fail = function(e) {
					pending = 0;
					done(tink_core_Outcome.Failure(e));
				};
				var set = function(index,value) {
					result[index] = value;
					if((pending -= 1) == 0) {
						done(tink_core_Outcome.Success(result));
					} else if(iter.hasNext() && pending > 0) {
						next();
					}
				};
				next = function() {
					i += 1;
					var index1 = i - 1;
					var next1 = iter.next().handle(function(o1) {
						switch(o1._hx_index) {
						case 0:
							var v = o1.data;
							set(index1,v);
							break;
						case 1:
							var e1 = o1.failure;
							fail(e1);
							break;
						}
					});
					linkArray.push(next1);
				};
				while(true) {
					var tmp;
					if(iter.hasNext() && pending > 0) {
						if(concurrency != null) {
							concurrency -= 1;
							tmp = concurrency + 1 > 0;
						} else {
							tmp = true;
						}
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					next();
				}
				links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
				if(sync) {
					if(links != null) {
						links.cancel();
					}
				}
			},lazy);
		}
	}
	static inSequence(a) {
		var loop = null;
		loop = function(index) {
			if(index == a.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
			} else {
				return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
					return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
					});
				});
			}
		};
		return loop(0);
	}
	static cache(gen) {
		var p = null;
		return function() {
			var ret = p;
			if(ret == null) {
				var sync = false;
				ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
					o.b.handle(function(_) {
						sync = true;
						p = null;
					});
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
				});
				if(!sync) {
					p = ret;
				}
			}
			var ret1 = ret.map(function(o1) {
				if(!tink_core_OutcomeTools.isSuccess(o1)) {
					p = null;
				}
				return o1;
			});
			return ret1.gather();
		};
	}
	static lift(p) {
		return p;
	}
	static trigger() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	}
	static reject(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
}
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
class tink_core__$Promise_Next_$Impl_$ {
	static ofSafe(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
		};
	}
	static ofSync(f) {
		return function(x) {
			var ret = f(x).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
		};
	}
	static _chain(a,b) {
		return function(v) {
			return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
		};
	}
}
tink_core__$Promise_Next_$Impl_$.__name__ = true;
class tink_core__$Promise_Combiner_$Impl_$ {
	static ofSafe(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
		};
	}
	static ofSync(f) {
		return function(x1,x2) {
			var ret = f(x1,x2).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
		};
	}
}
tink_core__$Promise_Combiner_$Impl_$.__name__ = true;
class tink_core__$Promise_PromiseTrigger_$Impl_$ {
	static _new() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(this1,v) {
		return this1.trigger(tink_core_Outcome.Success(v));
	}
	static reject(this1,e) {
		return this1.trigger(tink_core_Outcome.Failure(e));
	}
	static asPromise(this1) {
		return this1;
	}
}
tink_core__$Promise_PromiseTrigger_$Impl_$.__name__ = true;
class tink_core__$Ref_Ref_$Impl_$ {
	static _new() {
		var this1 = new Array(1);
		var this2 = this1;
		return this2;
	}
	static get_value(this1) {
		return this1[0];
	}
	static set_value(this1,param) {
		return this1[0] = param;
	}
	static toString(this1) {
		return "@[" + Std.string(this1[0]) + "]";
	}
	static to(v) {
		var this1 = new Array(1);
		var this2 = this1;
		var ret = this2;
		ret[0] = v;
		return ret;
	}
}
tink_core__$Ref_Ref_$Impl_$.__name__ = true;
class tink_core__$Signal_Signal_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Signal_SimpleSignal(f);
		return this1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				var this3 = f(result);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static flatMap(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				f(result).handle(cb);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static filter(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				if(f(result)) {
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static select(this1,selector,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				var _g = selector(result);
				switch(_g._hx_index) {
				case 0:
					var v = _g.v;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
					break;
				case 1:
					break;
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static join(this1,other,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static nextTime(this1,condition) {
		var ret = new tink_core_FutureTrigger();
		var link = null;
		var immediate = false;
		link = this1.handle(function(v) {
			if(condition == null || condition(v)) {
				ret.trigger(v);
				if(link == null) {
					immediate = true;
				} else if(link != null) {
					link.cancel();
				}
			}
		});
		if(immediate) {
			if(link != null) {
				link.cancel();
			}
		}
		return ret;
	}
	static until(this1,end) {
		var ret = new tink_core__$Signal_Suspendable(function($yield) {
			var this2 = this1.handle($yield);
			if(this2 == null) {
				return tink_core__$Callback_CallbackLink_$Impl_$.noop;
			} else {
				return ($_=this2,$bind($_,$_.cancel));
			}
		});
		end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
		return ret;
	}
	static next(this1,condition) {
		return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
	}
	static noise(this1) {
		return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
			return tink_core_Noise.Noise;
		});
	}
	static gather(this1) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		this1.handle(function(x) {
			tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
		});
		return ret;
	}
	static generate(generator) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		generator($bind(ret,ret.trigger));
		return ret;
	}
	static trigger() {
		return new tink_core_SignalTrigger();
	}
	static create(create) {
		return new tink_core__$Signal_Suspendable(create);
	}
	static ofClassical(add,remove,gather) {
		if(gather == null) {
			gather = true;
		}
		var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
			var f = function(a) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
			};
			add(f);
			var f1 = remove;
			var a1 = f;
			var this2 = new tink_core__$Callback_SimpleLink(function() {
				f1(a1);
			});
			return this2;
		});
		var ret = this1;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
}
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
class tink_core_SignalObject {
}
tink_core_SignalObject.__name__ = true;
Object.assign(tink_core_SignalObject.prototype, {
	__class__: tink_core_SignalObject
});
class tink_core__$Signal_SimpleSignal {
	constructor(f) {
		this.f = f;
	}
	handle(cb) {
		return this.f(cb);
	}
}
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_SimpleSignal.prototype, {
	__class__: tink_core__$Signal_SimpleSignal
});
class tink_core__$Signal_Suspendable {
	constructor(activate) {
		this.killed = false;
		this.trigger = new tink_core_SignalTrigger();
		this.activate = activate;
	}
	kill() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	handle(cb) {
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.length == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _gthis = this;
		var a = tink_core__$Callback_CallbackList_$Impl_$.add(this.trigger.handlers,cb);
		var this1 = new tink_core__$Callback_SimpleLink(function() {
			if(_gthis.trigger.handlers.length == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(a,this1);
	}
}
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_Suspendable.prototype, {
	__class__: tink_core__$Signal_Suspendable
});
class tink_core_SignalTrigger {
	constructor() {
		var this1 = [];
		this.handlers = this1;
	}
	trigger(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	getLength() {
		return this.handlers.length;
	}
	handle(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	clear() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	asSignal() {
		return this;
	}
}
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core_SignalTrigger.prototype, {
	__class__: tink_core_SignalTrigger
});
class tink_http_Chunked {
	static encoder() {
		if(tink_http_Chunked._encoder == null) {
			tink_http_Chunked._encoder = new tink_http_ChunkedEncoder();
		}
		return tink_http_Chunked._encoder;
	}
	static decoder() {
		if(tink_http_Chunked._decoder == null) {
			tink_http_Chunked._decoder = new tink_http_ChunkedDecoder();
		}
		return tink_http_Chunked._decoder;
	}
	static encode(source) {
		return tink_http_Chunked.encoder().transform(source);
	}
	static decode(source) {
		return tink_http_Chunked.decoder().transform(source);
	}
}
tink_http_Chunked.__name__ = true;
class tink_io_Transformer {
}
tink_io_Transformer.__name__ = true;
Object.assign(tink_io_Transformer.prototype, {
	__class__: tink_io_Transformer
});
class tink_http_ChunkedEncoder {
	constructor() {
	}
	transform(source) {
		return tink_io__$Source_Source_$Impl_$.chunked(source).map(tink_streams__$Stream_Mapping_$Impl_$.ofPlain(function(chunk) {
			return tink__$Chunk_Chunk_$Impl_$.catChunk(tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("" + StringTools.hex(chunk.getLength()) + "\r\n")),chunk),tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("\r\n")));
		})).append(tink_streams__$Stream_Stream_$Impl_$.ofIterator(HxOverrides.iter([tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("0\r\n"))])));
	}
}
tink_http_ChunkedEncoder.__name__ = true;
tink_http_ChunkedEncoder.__interfaces__ = [tink_io_Transformer];
Object.assign(tink_http_ChunkedEncoder.prototype, {
	__class__: tink_http_ChunkedEncoder
});
class tink_http_ChunkedDecoder {
	constructor() {
	}
	transform(source) {
		return tink_io_RealSourceTools.parseStream(source,new tink_http_ChunkedParser()).map(tink_streams__$Stream_Mapping_$Impl_$.ofPlain(function(v) {
			if(v == null) {
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			} else {
				return v;
			}
		}));
	}
}
tink_http_ChunkedDecoder.__name__ = true;
tink_http_ChunkedDecoder.__interfaces__ = [tink_io_Transformer];
Object.assign(tink_http_ChunkedDecoder.prototype, {
	__class__: tink_http_ChunkedDecoder
});
class tink_io_StreamParserObject {
}
tink_io_StreamParserObject.__name__ = true;
Object.assign(tink_io_StreamParserObject.prototype, {
	__class__: tink_io_StreamParserObject
});
class tink_http_ChunkedParser {
	constructor() {
		this.reset();
	}
	reset() {
		this.chunkSize = -1;
	}
	progress(cursor) {
		if(this.chunkSize < 0) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				this.chunkSize = Std.parseInt("0x" + v.toString());
				break;
			case 1:
				break;
			}
			return tink_io_ParseStep.Progressed;
		} else if(this.chunkSize == 0) {
			return tink_io_ParseStep.Progressed;
		} else if(cursor.length >= this.chunkSize + 2) {
			var _g1 = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g1._hx_index) {
			case 0:
				var v1 = _g1.v;
				this.reset();
				return tink_io_ParseStep.Done(v1);
			case 1:
				return tink_io_ParseStep.Failed(new tink_core_TypedError(null,"Invalid encoding",{ fileName : "tink/http/Chunked.hx", lineNumber : 82, className : "tink.http.ChunkedParser", methodName : "progress"}));
			}
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	eof(rest) {
		if(this.chunkSize == 0) {
			return tink_core_Outcome.Success(tink__$Chunk_Chunk_$Impl_$.EMPTY);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Unexpected end of input",{ fileName : "tink/http/Chunked.hx", lineNumber : 89, className : "tink.http.ChunkedParser", methodName : "eof"}));
		}
	}
}
tink_http_ChunkedParser.__name__ = true;
tink_http_ChunkedParser.__interfaces__ = [tink_io_StreamParserObject];
Object.assign(tink_http_ChunkedParser.prototype, {
	__class__: tink_http_ChunkedParser
});
var tink_http_ContainerResult = $hxEnums["tink.http.ContainerResult"] = { __ename__ : true, __constructs__ : ["Running","Failed","Shutdown"]
	,Running: ($_=function(running) { return {_hx_index:0,running:running,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["running"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Shutdown: {_hx_index:2,__enum__:"tink.http.ContainerResult",toString:$estr}
};
class tink_http__$Handler_Handler_$Impl_$ {
	static ofFunc(f) {
		return new tink_http_SimpleHandler(f);
	}
}
tink_http__$Handler_Handler_$Impl_$.__name__ = true;
class tink_http__$Header_ReadonlyMap_$Impl_$ {
	static get(this1,key) {
		return this1.get(key);
	}
	static exists(this1,key) {
		return this1.exists(key);
	}
	static iterator(this1) {
		return this1.iterator();
	}
	static keys(this1) {
		return this1.keys();
	}
}
tink_http__$Header_ReadonlyMap_$Impl_$.__name__ = true;
class tink_http_ContentType {
	constructor() {
		this.subtype = "*";
		this.type = "*";
		this.extensions = new haxe_ds_StringMap();
	}
	get_fullType() {
		return "" + this.type + "/" + this.subtype;
	}
	toString() {
		return this.raw;
	}
	static ofString(s) {
		var ret = new tink_http_ContentType();
		ret.raw = s;
		var parsed = tink_http__$Header_HeaderValue_$Impl_$.parse(s);
		var value = parsed[0].value;
		var _g = value.indexOf("/");
		if(_g == -1) {
			ret.type = value;
		} else {
			var pos = _g;
			ret.type = value.substring(0,pos);
			ret.subtype = value.substring(pos + 1);
		}
		ret.extensions = parsed[0].extensions;
		return ret;
	}
}
tink_http_ContentType.__name__ = true;
Object.assign(tink_http_ContentType.prototype, {
	__class__: tink_http_ContentType
});
class tink_http__$Header_HeaderName_$Impl_$ {
	static _new(s) {
		var this1 = s;
		return this1;
	}
	static ofString(s) {
		var this1 = s.toLowerCase();
		return this1;
	}
}
tink_http__$Header_HeaderName_$Impl_$.__name__ = true;
class tink_io_BytewiseParser {
	read(char) {
		throw new js__$Boot_HaxeError("abstract");
	}
	progress(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				var r = _g.r;
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g.e;
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	eof(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g.r;
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g.e;
			return tink_core_Outcome.Failure(e);
		}
	}
}
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
Object.assign(tink_io_BytewiseParser.prototype, {
	__class__: tink_io_BytewiseParser
});
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__ : true, __constructs__ : ["Progressed","Done","Failed"]
	,Progressed: {_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_http_HeaderParser extends tink_io_BytewiseParser {
	constructor(makeHeader) {
		super();
		this.last = -1;
		this.buf = new StringBuf();
		this.makeHeader = makeHeader;
	}
	read(c) {
		var _g = this.last;
		switch(c) {
		case -1:
			return this.nextLine();
		case 10:
			if(_g == 13) {
				return this.nextLine();
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
			break;
		case 13:
			if(_g == 13) {
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				return tink_io_ParseStep.Progressed;
			} else {
				this.last = 13;
				return tink_io_ParseStep.Progressed;
			}
			break;
		default:
			if(_g == 13) {
				var other1 = c;
				var c2 = this.last;
				this.buf.b += String.fromCodePoint(c2);
				this.buf.b += String.fromCodePoint(other1);
				this.last = -1;
				return tink_io_ParseStep.Progressed;
			} else {
				var other2 = c;
				this.last = other2;
				this.buf.b += String.fromCodePoint(other2);
				return tink_io_ParseStep.Progressed;
			}
		}
	}
	nextLine() {
		var line = this.buf.b;
		this.buf = new StringBuf();
		this.last = -1;
		if(line == "") {
			if(this.header == null) {
				return tink_io_ParseStep.Progressed;
			} else {
				return tink_io_ParseStep.Done(this.header);
			}
		} else if(this.header == null) {
			var _g = this.makeHeader(line,this.fields = []);
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.data;
				if(_g1 == null) {
					return tink_io_ParseStep.Done(this.header = null);
				} else {
					var v = _g1;
					this.header = v;
					return tink_io_ParseStep.Progressed;
				}
				break;
			case 1:
				var e = _g.failure;
				return tink_io_ParseStep.Failed(e);
			}
		} else {
			this.fields.push(tink_http_HeaderField.ofString(line));
			return tink_io_ParseStep.Progressed;
		}
	}
}
tink_http_HeaderParser.__name__ = true;
tink_http_HeaderParser.__super__ = tink_io_BytewiseParser;
Object.assign(tink_http_HeaderParser.prototype, {
	__class__: tink_http_HeaderParser
});
class tink_http__$Method_Method_$Impl_$ {
	static ofString(s,fallback) {
		var _g = s.toUpperCase();
		switch(_g) {
		case "DELETE":
			return "DELETE";
		case "GET":
			return "GET";
		case "HEAD":
			return "HEAD";
		case "OPTIONS":
			return "OPTIONS";
		case "PATCH":
			return "PATCH";
		case "POST":
			return "POST";
		case "PUT":
			return "PUT";
		default:
			var v = _g;
			return fallback(v);
		}
	}
}
tink_http__$Method_Method_$Impl_$.__name__ = true;
class tink_http_OutgoingRequestHeader extends tink_http_RequestHeader {
	constructor(method,url,protocol,fields) {
		super(method,url,protocol,fields);
	}
	concat(fields) {
		return new tink_http_OutgoingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
}
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
Object.assign(tink_http_OutgoingRequestHeader.prototype, {
	__class__: tink_http_OutgoingRequestHeader
});
class tink_http_OutgoingRequest extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
}
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
Object.assign(tink_http_OutgoingRequest.prototype, {
	__class__: tink_http_OutgoingRequest
});
var tink_http_Authorization = $hxEnums["tink.http.Authorization"] = { __ename__ : true, __constructs__ : ["Basic","Bearer","Others"]
	,Basic: ($_=function(user,pass) { return {_hx_index:0,user:user,pass:pass,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["user","pass"],$_)
	,Bearer: ($_=function(token) { return {_hx_index:1,token:token,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["token"],$_)
	,Others: ($_=function(scheme,param) { return {_hx_index:2,scheme:scheme,param:param,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["scheme","param"],$_)
};
class tink_http__$Response_ResponseHeader_$Impl_$ {
	static _new(statusCode,reason,fields,protocol) {
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,fields,protocol);
		return this1;
	}
	static fromStatusCode(code) {
		var this1 = new tink_http_ResponseHeaderBase(code,null,null,"HTTP/1.1");
		return this1;
	}
	static fromHeaderFields(fields) {
		var this1 = new tink_http_ResponseHeaderBase(200,null,fields,"HTTP/1.1");
		return this1;
	}
	static parser() {
		return tink_http_ResponseHeaderBase.parser();
	}
}
tink_http__$Response_ResponseHeader_$Impl_$.__name__ = true;
class tink_http_IncomingResponse extends tink_http_Message {
	constructor(header,body) {
		super(header,body);
	}
	static readAll(res) {
		return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(res.body),function(b) {
			if(res.header.statusCode >= 400) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(res.header.statusCode,res.header.reason,b.toString(),{ fileName : "tink/http/Response.hx", lineNumber : 115, className : "tink.http.IncomingResponse", methodName : "readAll"}))));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(b)));
			}
		});
	}
	static reportError(e) {
		var statusCode = e.code;
		var reason = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(e.code);
		var this1 = "Content-Type".toLowerCase();
		var this2 = new tink_http_ResponseHeaderBase(statusCode,reason,[new tink_http_HeaderField(this1,"application/json")],"HTTP/1.1");
		return new tink_http_IncomingResponse(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
	}
}
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.__super__ = tink_http_Message;
Object.assign(tink_http_IncomingResponse.prototype, {
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__ : true, __constructs__ : ["Value","File"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["handle"],$_)
};
class tink_http__$StructuredBody_UploadedFile_$Impl_$ {
	static ofBlob(name,type,data) {
		return { fileName : name, mimeType : type, size : data.length, read : function() {
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data)));
		}, saveTo : function(path) {
			var name1 = "File sink " + path;
			var dest = tink_io_nodejs_NodejsSink.wrap(name1,js_node_Fs.createWriteStream(path));
			var ret = tink_io__$Source_Source_$Impl_$.pipeTo(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data))),dest,{ end : true}).map(function(r) {
				switch(r._hx_index) {
				case 0:
					return tink_core_Outcome.Success(tink_core_Noise.Noise);
				case 1:
					var _g3 = r.rest;
					var _g2 = r.result;
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"File $path closed unexpectedly",{ fileName : "tink/http/StructuredBody.hx", lineNumber : 37, className : "tink.http._StructuredBody.UploadedFile_Impl_", methodName : "ofBlob"}));
				case 2:
					var _g1 = r.rest;
					var e = r.e;
					return tink_core_Outcome.Failure(e);
				}
			});
			return ret.gather();
		}};
	}
}
tink_http__$StructuredBody_UploadedFile_$Impl_$.__name__ = true;
var tink_http_containers__$NodeContainer_ServerKindBase = $hxEnums["tink.http.containers._NodeContainer.ServerKindBase"] = { __ename__ : true, __constructs__ : ["Instance","Port","Host","Path","Fd"]
	,Instance: ($_=function(server) { return {_hx_index:0,server:server,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["server"],$_)
	,Port: ($_=function(port) { return {_hx_index:1,port:port,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["port"],$_)
	,Host: ($_=function(host) { return {_hx_index:2,host:host,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["host"],$_)
	,Path: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["path"],$_)
	,Fd: ($_=function(fd) { return {_hx_index:4,fd:fd,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["fd"],$_)
};
class tink_http_containers__$NodeContainer_ServerKind_$Impl_$ {
	static fromInstance(server) {
		return tink_http_containers__$NodeContainer_ServerKindBase.Instance(server);
	}
	static fromPort(port) {
		return tink_http_containers__$NodeContainer_ServerKindBase.Port(port);
	}
	static fromHost(host) {
		return tink_http_containers__$NodeContainer_ServerKindBase.Host(host);
	}
	static fromPath(path) {
		return tink_http_containers__$NodeContainer_ServerKindBase.Path(path);
	}
	static fromFd(fd) {
		return tink_http_containers__$NodeContainer_ServerKindBase.Fd(fd);
	}
}
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.__name__ = true;
class tink_io__$PipeOptions_PipeOptions_$Impl_$ {
	static get_end(this1) {
		if(this1 != null) {
			return this1.end;
		} else {
			return false;
		}
	}
	static get_destructive(this1) {
		if(this1 != null) {
			return this1.destructive;
		} else {
			return false;
		}
	}
}
tink_io__$PipeOptions_PipeOptions_$Impl_$.__name__ = true;
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io_PipeResultTools {
	static toOutcome(result) {
		switch(result._hx_index) {
		case 0:
			return tink_core_Outcome.Success(true);
		case 1:
			var _g4 = result.rest;
			var _g3 = result.result;
			return tink_core_Outcome.Success(false);
		case 2:
			var _g1 = result.rest;
			var e = result.e;
			return tink_core_Outcome.Failure(e);
		case 3:
			var e1 = result.e;
			return tink_core_Outcome.Failure(e1);
		}
	}
	static toResult(c,result,buffered) {
		var mk = function(s) {
			if(buffered == null) {
				return s;
			} else {
				var v = buffered;
				return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
			}
		};
		switch(c._hx_index) {
		case 0:
			var rest = c.rest;
			return tink_io_PipeResult.SinkEnded(result,mk(rest));
		case 1:
			var rest1 = c.at;
			var e = c.error;
			return tink_io_PipeResult.SinkFailed(e,mk(rest1));
		case 2:
			var e1 = c.error;
			return tink_io_PipeResult.SourceFailed(e1);
		case 3:
			return tink_io_PipeResult.AllWritten;
		}
	}
}
tink_io_PipeResultTools.__name__ = true;
class tink_io__$Sink_Blackhole extends tink_io_SinkBase {
	constructor() {
		super();
	}
	consume(source,options) {
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g1 = o.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = o.error;
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
}
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_Blackhole.prototype, {
	__class__: tink_io__$Sink_Blackhole
});
class tink_io__$Sink_SinkYielding_$Impl_$ {
	static end(this1) {
		if(this1.get_sealed()) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		} else {
			var ret = this1.consume(tink_io__$Source_Source_$Impl_$.EMPTY,{ end : true}).map(function(r) {
				switch(r._hx_index) {
				case 0:
					return tink_core_Outcome.Success(true);
				case 1:
					var _g3 = r.rest;
					var _g2 = r.result;
					return tink_core_Outcome.Success(true);
				case 2:
					var _g1 = r.rest;
					var e = r.e;
					return tink_core_Outcome.Failure(e);
				}
			});
			return ret.gather();
		}
	}
	static dirty(this1) {
		return this1;
	}
	static ofError(e) {
		return new tink_io__$Sink_ErrorSink(e);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				return v;
			case 1:
				var e = o.failure;
				return tink_io__$Sink_SinkYielding_$Impl_$.ofError(e);
			}
		});
		return new tink_io__$Sink_FutureSink(ret.gather());
	}
	static ofNodeStream(name,r) {
		return tink_io_nodejs_NodejsSink.wrap(name,r);
	}
	static ofOutput(name,target,options) {
		var tmp;
		if(options == null) {
			tmp = tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			var _g = options.worker;
			if(_g == null) {
				tmp = tink_io__$Worker_Worker_$Impl_$.get();
			} else {
				var w = _g;
				tmp = w;
			}
		}
		return new tink_io_std_OutputSink(name,target,tmp);
	}
}
tink_io__$Sink_SinkYielding_$Impl_$.__name__ = true;
class tink_io__$Sink_FutureSink extends tink_io_SinkBase {
	constructor(f) {
		super();
		this.f = f;
	}
	consume(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
}
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_FutureSink.prototype, {
	__class__: tink_io__$Sink_FutureSink
});
class tink_io__$Sink_ErrorSink extends tink_io_SinkBase {
	constructor(error) {
		super();
		this.error = error;
	}
	get_sealed() {
		return false;
	}
	consume(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
}
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_ErrorSink.prototype, {
	__class__: tink_io__$Sink_ErrorSink
});
class tink_io_RealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			switch(o._hx_index) {
			case 1:
				var e = o.error;
				return tink_core_Outcome.Failure(e);
			case 2:
				var c = o.result;
				return tink_core_Outcome.Success(c);
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g3 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			case 2:
				var e1 = r.e;
				return tink_core_Outcome.Failure(e1);
			}
		});
		return ret.gather();
	}
	static split(src,delim) {
		var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
		return { before : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
			var _g = p.a;
			switch(_g._hx_index) {
			case 0:
				var chunk = _g.v;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
			case 1:
				return src;
			}
		})))), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s,function(p1) {
			var _g1 = p1.a;
			switch(_g1._hx_index) {
			case 0:
				var _g11 = _g1.v;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
			case 1:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 177, className : "tink.io.RealSourceTools", methodName : "split"}))));
			}
		}), after : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p2) {
			return p2.b;
		}))))};
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static idealize(s,rescue) {
		return tink_io__$Source_Source_$Impl_$.chunked(s).idealize(rescue);
	}
}
tink_io_RealSourceTools.__name__ = true;
class tink_io_IdealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			var c = o.result;
			return c;
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g3 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static split(s,delim) {
		var s1 = tink_io_RealSourceTools.split(s,delim);
		return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e1) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		})};
	}
}
tink_io_IdealSourceTools.__name__ = true;
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__ : true, __constructs__ : ["Parsed","Invalid","Broke"]
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io__$StreamParser_StreamParser_$Impl_$ {
	static doParse(source,p,consume,finish) {
		var cursor = tink__$Chunk_Chunk_$Impl_$.EMPTY.getCursor();
		var resume = true;
		var mk = function(source1) {
			if(cursor.currentPos < cursor.length) {
				return source1.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
			} else {
				return source1;
			}
		};
		var flush = function() {
			var _g = cursor.flush();
			var c = _g;
			if(c.getLength() == 0) {
				return tink_io__$Source_Source_$Impl_$.EMPTY;
			} else {
				var c1 = _g;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(c1));
			}
		};
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(chunk) {
			if(chunk.getLength() == 0) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
			}
			cursor.shift(chunk);
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var next = null;
				next = function() {
					cursor.shift();
					var lastPos = cursor.currentPos;
					var _g1 = p.progress(cursor);
					switch(_g1._hx_index) {
					case 0:
						if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
							next();
						} else {
							cb(tink_streams_Handled.Resume);
						}
						break;
					case 1:
						var v = _g1.r;
						consume(v).handle(function(o) {
							resume = o.resume;
							if(resume) {
								if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
									next();
								} else {
									cb(tink_streams_Handled.Resume);
								}
							} else {
								cb(tink_streams_Handled.Finish);
							}
						});
						break;
					case 2:
						var e = _g1.e;
						cb(tink_streams_Handled.Clog(e));
						break;
					}
				};
				next();
			});
		})).flatMap(function(c2) {
			switch(c2._hx_index) {
			case 0:
				var rest = c2.rest;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(rest))));
			case 1:
				var rest1 = c2.at;
				var e1 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e1,mk(rest1))));
			case 2:
				var e2 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e2)));
			case 3:
				if(cursor.currentPos < cursor.length) {
					var v1 = finish();
					var v2 = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY));
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(v1,mk(v2))));
				} else if(!resume) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
				} else {
					var _g2 = p.eof(cursor);
					switch(_g2._hx_index) {
					case 0:
						var result = _g2.data;
						var ret1 = consume(result).map(function(_) {
							return tink_io_ParseResult.Parsed(finish(),flush());
						});
						return ret1.gather();
					case 1:
						var e3 = _g2.failure;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e3,flush())));
					}
				}
				break;
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var res = null;
		var onResult = function(r) {
			res = r;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
		};
		return tink_io__$StreamParser_StreamParser_$Impl_$.doParse(s,p,onResult,function() {
			return res;
		});
	}
	static parseStream(s,p) {
		var next = null;
		next = function(step) {
			if(s.get_depleted()) {
				step(tink_streams_Step.End);
			} else {
				tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var rest = o.rest;
						var result = o.data;
						s = rest;
						var next1 = tink_streams_Step.Link(result,tink_streams_Generator.stream(next));
						step(next1);
						break;
					case 1:
						var _g3 = o.rest;
						var e = o.e;
						step(tink_streams_Step.Fail(e));
						break;
					case 2:
						var e1 = o.e;
						step(tink_streams_Step.Fail(e1));
						break;
					}
				});
			}
		};
		return tink_streams_Generator.stream(next);
	}
}
tink_io__$StreamParser_StreamParser_$Impl_$.__name__ = true;
class tink_io_Splitter extends tink_io_BytewiseParser {
	constructor(delim) {
		super();
		this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		this.delim = delim;
	}
	read(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink__$Chunk_Chunk_$Impl_$.catChunk(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				var i = _g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
}
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_Splitter.prototype, {
	__class__: tink_io_Splitter
});
class tink_io_SimpleBytewiseParser extends tink_io_BytewiseParser {
	constructor(f) {
		super();
		this._read = f;
	}
	read(char) {
		return this._read(char);
	}
}
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_SimpleBytewiseParser.prototype, {
	__class__: tink_io_SimpleBytewiseParser
});
class tink_io_WorkerObject {
}
tink_io_WorkerObject.__name__ = true;
Object.assign(tink_io_WorkerObject.prototype, {
	__class__: tink_io_WorkerObject
});
class tink_io__$Worker_EagerWorker {
	constructor() {
	}
	work(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
}
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
Object.assign(tink_io__$Worker_EagerWorker.prototype, {
	__class__: tink_io__$Worker_EagerWorker
});
class tink_io__$Worker_Worker_$Impl_$ {
	static ensure(this1) {
		if(this1 == null) {
			return tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			return this1;
		}
	}
	static get() {
		return tink_io__$Worker_Worker_$Impl_$.pool[Std.random(tink_io__$Worker_Worker_$Impl_$.pool.length)];
	}
	static work(this1,task) {
		return this1.work(task);
	}
}
tink_io__$Worker_Worker_$Impl_$.__name__ = true;
class tink_io_js_BlobSource extends tink_streams_Generator {
	constructor(name,blob,pos,chunkSize) {
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(name,blob,pos,chunkSize);
	}
	_hx_constructor(name,blob,pos,chunkSize) {
		this.name = name;
		super._hx_constructor(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(pos >= blob.size) {
				cb(tink_streams_Step.End);
			} else {
				var end = pos + chunkSize;
				if(end > blob.size) {
					end = blob.size;
				}
				var reader = new FileReader();
				reader.onload = function() {
					var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
					var tmp = tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize));
					cb(tmp);
				};
				reader.onerror = function(e) {
					var tmp1 = tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 27, className : "tink.io.js.BlobSource", methodName : "new"}));
					cb(tmp1);
				};
				var tmp2 = blob.slice(pos,end);
				reader.readAsArrayBuffer(tmp2);
			}
		},true));
	}
	static wrap(name,blob,chunkSize) {
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
}
tink_io_js_BlobSource.__name__ = true;
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_js_BlobSource.prototype, {
	__class__: tink_io_js_BlobSource
});
class tink_io_nodejs_WrappedBuffer {
	constructor(buffer) {
		this.buffer = buffer;
	}
	getCursor() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	flatten(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	getLength() {
		return this.buffer.length;
	}
	slice(from,to) {
		return new tink_io_nodejs_WrappedBuffer(this.buffer.slice(from,to));
	}
	toString() {
		return this.buffer.toString();
	}
	toBytes() {
		var copy = tink_io_nodejs_WrappedBuffer.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	blitTo(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
		return;
	}
}
tink_io_nodejs_WrappedBuffer.__name__ = true;
tink_io_nodejs_WrappedBuffer.__interfaces__ = [tink_chunk_ChunkObject];
Object.assign(tink_io_nodejs_WrappedBuffer.prototype, {
	__class__: tink_io_nodejs_WrappedBuffer
});
class tink_io_std_InputSource extends tink_streams_Generator {
	constructor(name,target,worker,buf,offset) {
		var next = function(buf1,offset1) {
			return new tink_io_std_InputSource(name,target,worker,buf1,offset1);
		};
		var free = buf.length - offset;
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_io__$Worker_Worker_$Impl_$.work(worker,new tink_core__$Lazy_LazyFunc(function() {
				try {
					var read = target.readBytes(buf,offset,free);
					if(read == 0) {
						return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
					} else {
						var nextOffset = free - read < 1024 ? 0 : offset + read;
						var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
						return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
					}
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					if(((e1) instanceof haxe_io_Eof)) {
						var e2 = e1;
						return tink_streams_Step.End;
					} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
						var e3 = e1;
						if(e3._hx_index == 0) {
							return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
						} else {
							return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e3,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
						}
					} else {
						throw e;
					}
				}
			})).handle(function(step) {
				switch(step._hx_index) {
				case 1:
					var _g = step.e;
					try {
						target.close();
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					}
					break;
				case 2:
					try {
						target.close();
					} catch( e6 ) {
						var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					}
					break;
				default:
				}
				cb(step);
			});
		},true));
	}
}
tink_io_std_InputSource.__name__ = true;
tink_io_std_InputSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_std_InputSource.prototype, {
	__class__: tink_io_std_InputSource
});
class tink_io_std_OutputSink extends tink_io_SinkBase {
	constructor(name,target,worker) {
		super();
		this.name = name;
		this.target = target;
		this.worker = worker;
	}
	consume(source,options) {
		var rest = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io__$Worker_Worker_$Impl_$.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( e ) {
								var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
								if(((e1) instanceof haxe_io_Eof)) {
									var e2 = e1;
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
									var e3 = e1;
									if(e3._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e3,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((e1) instanceof tink_core_TypedError)) {
									return tink_core_Outcome.Failure(e1);
								} else {
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e1,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								if(_g == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									var v = _g;
									pos += v;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								var e4 = o.failure;
								cb(tink_streams_Handled.Clog(e4));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( e5 ) {
					var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				}
			});
		}
		var ret1 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise,rest);
		});
		return ret1.gather();
	}
}
tink_io_std_OutputSink.__name__ = true;
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_std_OutputSink.prototype, {
	__class__: tink_io_std_OutputSink
});
class tink_json__$Char_Char_$Impl_$ {
	static toString(this1) {
		return String.fromCodePoint(this1);
	}
}
tink_json__$Char_Char_$Impl_$.__name__ = true;
class tink_json__$Representation_Representation_$Impl_$ {
	static get(this1) {
		return this1;
	}
	static _new(v) {
		var this1 = v;
		return this1;
	}
	static of(v) {
		return v;
	}
}
tink_json__$Representation_Representation_$Impl_$.__name__ = true;
var tink_json_Value = $hxEnums["tink.json.Value"] = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"]
	,VNumber: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["f"],$_)
	,VString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VNull: {_hx_index:2,__enum__:"tink.json.Value",toString:$estr}
	,VBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["b"],$_)
	,VArray: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
	,VObject: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
};
class tink_json_Writer {
}
tink_json_Writer.__name__ = true;
class tink_json_BasicWriter {
	constructor() {
		this.plugins = new tink_core_Annex(this);
	}
	init() {
		var this1 = "";
		this.buf = this1;
	}
	output(s) {
		this.buf += s;
	}
	char(c) {
		this.buf += String.fromCodePoint(c);
	}
	writeInt(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	writeFloat(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	writeBool(b) {
		this.buf += b ? "true" : "false";
	}
	writeString(s) {
		var s1 = JSON.stringify(s);
		this.buf += s1;
	}
	writeDynamic(value) {
		var s = JSON.stringify(value);
		this.buf += s;
	}
	writeValue(value) {
		var _gthis = this;
		switch(value._hx_index) {
		case 0:
			var f = value.f;
			this.buf += f == null ? "null" : "" + f;
			break;
		case 1:
			var s = value.s;
			var s1 = JSON.stringify(s);
			this.buf += s1;
			break;
		case 2:
			this.buf += "null";
			break;
		case 3:
			var b = value.b;
			this.buf += b ? "true" : "false";
			break;
		case 4:
			var _g3 = value.a;
			if(_g3.length == 0) {
				this.buf += "[]";
			} else {
				var a = _g3;
				this.buf += String.fromCodePoint(91);
				this.writeValue(a[0]);
				var _g = 1;
				var _g1 = a.length;
				while(_g < _g1) {
					var i = _g++;
					this.buf += String.fromCodePoint(44);
					this.writeValue(a[i]);
				}
				this.buf += String.fromCodePoint(93);
			}
			break;
		case 5:
			var _g2 = value.a;
			if(_g2.length == 0) {
				this.buf += "{}";
			} else {
				var a1 = _g2;
				this.buf += String.fromCodePoint(123);
				var p = a1[0];
				var s2 = JSON.stringify(p.name);
				_gthis.buf += s2;
				_gthis.buf += String.fromCodePoint(58);
				_gthis.writeValue(p.value);
				var _g4 = 1;
				var _g11 = a1.length;
				while(_g4 < _g11) {
					var i1 = _g4++;
					this.buf += String.fromCodePoint(44);
					var p1 = a1[i1];
					var s3 = JSON.stringify(p1.name);
					_gthis.buf += s3;
					_gthis.buf += String.fromCodePoint(58);
					_gthis.writeValue(p1.value);
				}
				this.buf += String.fromCodePoint(125);
			}
			break;
		}
	}
}
tink_json_BasicWriter.__name__ = true;
Object.assign(tink_json_BasicWriter.prototype, {
	__class__: tink_json_BasicWriter
});
class tink_json__$Writer_StringBuf_$Impl_$ {
	static _new() {
		var this1 = "";
		return this1;
	}
	static addChar(this1,c) {
		this1 += String.fromCodePoint(c);
	}
	static add(this1,s) {
		this1 += s;
	}
}
tink_json__$Writer_StringBuf_$Impl_$.__name__ = true;
class tink_json_Writer0 extends tink_json_BasicWriter {
	constructor() {
		super();
	}
	parse0(value) {
		var __first = true;
		this.buf += String.fromCodePoint(123);
		var value1 = value.slideshow;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"slideshow\":";
		this.parse1(value1);
		this.buf += String.fromCodePoint(125);
	}
	parse1(value) {
		var __first = true;
		this.buf += String.fromCodePoint(123);
		var value1 = value.author;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"author\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		var value2 = value.date;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"date\":";
		var s1 = JSON.stringify(value2);
		this.buf += s1;
		var value3 = value.slides;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"slides\":";
		this.buf += String.fromCodePoint(91);
		var first = true;
		var _g = 0;
		while(_g < value3.length) {
			var value4 = value3[_g];
			++_g;
			if(first) {
				first = false;
			} else {
				this.buf += String.fromCodePoint(44);
			}
			this.parse2(value4);
		}
		this.buf += String.fromCodePoint(93);
		var value5 = value.title;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"title\":";
		var s2 = JSON.stringify(value5);
		this.buf += s2;
		this.buf += String.fromCodePoint(125);
	}
	parse2(value) {
		var __first = true;
		this.buf += String.fromCodePoint(123);
		var value1 = value.title;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"title\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		var value2 = value.type;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"type\":";
		var s1 = JSON.stringify(value2);
		this.buf += s1;
		var _g = value.items;
		if(_g != null) {
			var value3 = _g;
			if(__first) {
				__first = false;
			} else {
				this.buf += String.fromCodePoint(44);
			}
			this.buf += "\"items\":";
			if(value3 == null) {
				this.buf += "null";
			} else {
				this.buf += String.fromCodePoint(91);
				var first = true;
				var _g1 = 0;
				while(_g1 < value3.length) {
					var value4 = value3[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf += String.fromCodePoint(44);
					}
					var s2 = JSON.stringify(value4);
					this.buf += s2;
				}
				this.buf += String.fromCodePoint(93);
			}
		}
		this.buf += String.fromCodePoint(125);
	}
	write(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
}
tink_json_Writer0.__name__ = true;
tink_json_Writer0.__super__ = tink_json_BasicWriter;
Object.assign(tink_json_Writer0.prototype, {
	__class__: tink_json_Writer0
});
class tink_macro_DirectType {
}
tink_macro_DirectType.__name__ = true;
class tink_querystring__$Pairs_Pairs_$Impl_$ {
	static portions(s) {
		return new tink_url__$Query_QueryStringParser(s,"&","=",0);
	}
	static portionsOfUrl(u) {
		return tink_querystring__$Pairs_Pairs_$Impl_$.portions(u.query);
	}
	static ofIterable(i) {
		return $getIterator(i);
	}
}
tink_querystring__$Pairs_Pairs_$Impl_$.__name__ = true;
class tink_streams__$IdealStream_IdealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			return buf;
		});
		return ret.gather();
	}
}
tink_streams__$IdealStream_IdealStream_$Impl_$.__name__ = true;
class tink_streams_IdealStreamBase extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	idealize(rescue) {
		return this;
	}
}
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_IdealStreamBase.prototype, {
	__class__: tink_streams_IdealStreamBase
});
class tink_streams__$RealStream_RealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static promiseOfRealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamError(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			switch(c._hx_index) {
			case 0:
				var _g1 = c.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = c.error;
				return tink_core_Outcome.Failure(e);
			case 3:
				return tink_core_Outcome.Success(buf);
			}
		});
		return ret.gather();
	}
}
tink_streams__$RealStream_RealStream_$Impl_$.__name__ = true;
class tink_streams__$Stream_Stream_$Impl_$ {
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static dirty(this1) {
		return this1;
	}
	static single(i) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
	}
	static ofIterator(i) {
		var next = null;
		next = function(step) {
			step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
		};
		return tink_streams_Generator.stream(next);
	}
	static flatten(f) {
		return new tink_streams_FutureStream(f);
	}
	static promiseIdeal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promiseReal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promise(f) {
		var ret = f.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return tink_streams__$Stream_Stream_$Impl_$.dirty(s);
			case 1:
				var e = o.failure;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static ofError(e) {
		return new tink_streams__$Stream_ErrorStream(e);
	}
}
tink_streams__$Stream_Stream_$Impl_$.__name__ = true;
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : true, __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_streams__$Stream_Regrouper_$Impl_$ {
	static ofIgnorance(f) {
		return { apply : function(i,_) {
			return f(i);
		}};
	}
	static ofIgnoranceSync(f) {
		return { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		}};
	}
	static ofFunc(f) {
		return { apply : f};
	}
	static ofFuncSync(f) {
		return { apply : function(i,s) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
		}};
	}
}
tink_streams__$Stream_Regrouper_$Impl_$.__name__ = true;
class tink_streams__$Stream_CompoundStream extends tink_streams_StreamBase {
	constructor(parts) {
		super();
		this.parts = parts;
	}
	get_depleted() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	next() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	decompose(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	forEach(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	static consumeParts(parts,handler,cb) {
		if(parts.length == 0) {
			cb(tink_streams_Conclusion.Depleted);
		} else {
			parts[0].forEach(handler).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					parts = parts.slice();
					parts[0] = rest;
					var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp);
					break;
				case 1:
					var at = o.at;
					var e = o.error;
					if(at.get_depleted()) {
						parts = parts.slice(1);
					} else {
						parts = parts.slice();
						parts[0] = at;
					}
					var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp1);
					break;
				case 2:
					var e1 = o.error;
					cb(tink_streams_Conclusion.Failed(e1));
					break;
				case 3:
					tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
					break;
				}
			});
		}
	}
	static of(streams) {
		var ret = [];
		var _g = 0;
		while(_g < streams.length) {
			var s = streams[_g];
			++_g;
			s.decompose(ret);
		}
		if(ret.length == 0) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams__$Stream_CompoundStream(ret);
		}
	}
}
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CompoundStream.prototype, {
	__class__: tink_streams__$Stream_CompoundStream
});
class tink_streams__$Stream_RegroupStream extends tink_streams__$Stream_CompoundStream {
	constructor(source,f,prev) {
		if(prev == null) {
			prev = tink_streams_Empty.inst;
		}
		var ret = null;
		var terminated = false;
		var buf = [];
		var ret1 = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
			buf.push(item);
			var ret2 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					ret = v;
					return tink_streams_Handled.Finish;
				case 1:
					var v1 = o.data;
					var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
					if(v1._hx_index == 0) {
						var v2 = v1.v;
						ret = v2;
					} else {
						ret = l.get();
					}
					terminated = true;
					return tink_streams_Handled.Finish;
				case 2:
					return tink_streams_Handled.Resume;
				case 3:
					var e = o.e;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret2.gather();
		})).map(function(o1) {
			switch(o1._hx_index) {
			case 0:
				if(terminated) {
					return ret;
				} else {
					var rest = o1.rest;
					return new tink_streams__$Stream_RegroupStream(rest,f,ret);
				}
				break;
			case 1:
				var rest1 = o1.at;
				var e1 = o1.error;
				return new tink_streams__$Stream_CloggedStream(tink_streams__$Stream_Stream_$Impl_$.ofError(e1),rest1);
			case 2:
				var e2 = o1.error;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e2);
			case 3:
				if(buf.length == 0) {
					return tink_streams_Empty.inst;
				} else {
					var ret3 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o2) {
						switch(o2._hx_index) {
						case 0:
							var v3 = o2.data;
							return v3;
						case 1:
							var v4 = o2.data;
							var l1 = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
							if(v4._hx_index == 0) {
								var v5 = v4.v;
								return v5;
							} else {
								return l1.get();
							}
							break;
						case 2:
							return tink_streams_Empty.inst;
						case 3:
							var e3 = o2.e;
							return tink_streams__$Stream_Stream_$Impl_$.ofError(e3);
						}
					});
					return tink_streams__$Stream_Stream_$Impl_$.flatten(ret3.gather());
				}
				break;
			}
		});
		var next = tink_streams__$Stream_Stream_$Impl_$.flatten(ret1.gather());
		super([prev,next]);
	}
}
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
Object.assign(tink_streams__$Stream_RegroupStream.prototype, {
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
class tink_streams__$Stream_CloggedStream extends tink_streams_StreamBase {
	constructor(rest,error) {
		super();
		this.rest = rest;
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
}
tink_streams__$Stream_CloggedStream.__name__ = true;
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CloggedStream.prototype, {
	__class__: tink_streams__$Stream_CloggedStream
});
class tink_streams__$Stream_ErrorStream extends tink_streams_StreamBase {
	constructor(error) {
		super();
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
}
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_ErrorStream.prototype, {
	__class__: tink_streams__$Stream_ErrorStream
});
class tink_streams__$Stream_Mapping_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(o) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o)))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var d = o1.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o1.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(o) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o));
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(v1));
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(f(i[0])))));
		}};
		return this1;
	}
}
tink_streams__$Stream_Mapping_$Impl_$.__name__ = true;
class tink_streams__$Stream_Filter_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(matched) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(matched) {
				return tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(v1 ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst)));
		}};
		return this1;
	}
}
tink_streams__$Stream_Filter_$Impl_$.__name__ = true;
class tink_streams_IdealizeStream extends tink_streams_IdealStreamBase {
	constructor(target,rescue) {
		super();
		this.target = target;
		this.rescue = rescue;
	}
	get_depleted() {
		return this.target.get_depleted();
	}
	next() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					var tmp = tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue));
					cb(tmp);
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					var tmp1 = tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue));
					cb(tmp1);
					break;
				case 2:
					var e1 = end.error;
					_gthis.rescue(e1).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
}
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
Object.assign(tink_streams_IdealizeStream.prototype, {
	__class__: tink_streams_IdealizeStream
});
class tink_streams__$Stream_Handler_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,item) {
		return this1(item);
	}
	static ofSafeSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
}
tink_streams__$Stream_Handler_$Impl_$.__name__ = true;
class tink_streams__$Stream_Reducer_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,res,item) {
		return this1(res,item);
	}
	static ofSafeSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofPlainSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
		};
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
	static ofPromiseBased(f) {
		var this1 = function(res,cur) {
			var ret = f(res,cur).map(function(s) {
				switch(s._hx_index) {
				case 0:
					var r = s.data;
					return tink_streams_ReductionStep.Progress(r);
				case 1:
					var e = s.failure;
					return tink_streams_ReductionStep.Crash(e);
				}
			});
			return ret.gather();
		};
		return this1;
	}
}
tink_streams__$Stream_Reducer_$Impl_$.__name__ = true;
class tink_streams_FutureStream extends tink_streams_StreamBase {
	constructor(f) {
		super();
		this.f = f;
	}
	next() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
}
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_FutureStream.prototype, {
	__class__: tink_streams_FutureStream
});
class tink_streams_BlendStream extends tink_streams_Generator {
	constructor(a,b) {
		var first = null;
		var wait = function(s) {
			var ret = s.next().map(function(o) {
				if(first == null) {
					first = s;
				}
				return o;
			});
			return ret.gather();
		};
		var n1 = wait(a);
		var n2 = wait(b);
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_core__$Future_Future_$Impl_$.first(n1,n2).handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var rest = o1.next;
					var item = o1.value;
					var tmp = tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a));
					cb(tmp);
					break;
				case 1:
					var e = o1.e;
					cb(tink_streams_Step.Fail(e));
					break;
				case 2:
					(first == a ? n2 : n1).handle(cb);
					break;
				}
			});
		}));
	}
}
tink_streams_BlendStream.__name__ = true;
tink_streams_BlendStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_BlendStream.prototype, {
	__class__: tink_streams_BlendStream
});
class tink_streams_SignalStream extends tink_streams_Generator {
	constructor(signal) {
		var ret = tink_core__$Signal_Signal_$Impl_$.nextTime(signal).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var data = o.data;
				return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
			case 1:
				var e = o.e;
				return tink_streams_Step.Fail(e);
			case 2:
				return tink_streams_Step.End;
			}
		});
		super(ret.gather());
	}
}
tink_streams_SignalStream.__name__ = true;
tink_streams_SignalStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_SignalStream.prototype, {
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : true, __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
class tink_url__$Auth_Auth_$Impl_$ {
	static _new(user,password) {
		var this1 = "" + user + ":" + password;
		return this1;
	}
	static get_user(this1) {
		if(this1 == null) {
			return null;
		} else {
			return this1.split(":")[0];
		}
	}
	static get_password(this1) {
		if(this1 == null) {
			return null;
		} else {
			return this1.split(":")[1];
		}
	}
	static toString(this1) {
		if(this1 == null) {
			return "";
		} else {
			return "" + this1 + "@";
		}
	}
}
tink_url__$Auth_Auth_$Impl_$.__name__ = true;
class tink_url__$PortionArray_PortionArray_$Impl_$ {
	static toStringArray(this1) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < this1.length) {
			var p = this1[_g1];
			++_g1;
			_g.push(tink_url__$Portion_Portion_$Impl_$.toString(p));
		}
		return _g;
	}
}
tink_url__$PortionArray_PortionArray_$Impl_$.__name__ = true;
class tink_url__$Query_QueryStringBuilder_$Impl_$ {
	static _new() {
		var this1 = [];
		return this1;
	}
	static add(this1,name,value) {
		this1.push(name + "=" + value);
		return this1;
	}
	static toString(this1,sep) {
		if(sep == null) {
			sep = "&";
		}
		return this1.join(sep);
	}
	static copy(this1) {
		return this1.slice();
	}
}
tink_url__$Query_QueryStringBuilder_$Impl_$.__name__ = true;
class tink_web__$Response_Response_$Impl_$ {
	static _new(header,body) {
		var this1 = new tink_http_Message(header,body);
		return this1;
	}
	static getData(this1) {
		return this1.body;
	}
}
tink_web__$Response_Response_$Impl_$.__name__ = true;
class tink_web_forms__$FormField_FormField_$Impl_$ {
	static getValue(this1) {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			return v;
		case 1:
			var _g1 = this1.handle;
			throw new js__$Boot_HaxeError("expected plain value but received file");
		}
	}
	static toFloat(this1) {
		return tink__$Stringly_Stringly_$Impl_$.toFloat(tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1));
	}
	static toInt(this1) {
		return tink__$Stringly_Stringly_$Impl_$.toInt(tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1));
	}
	static toString(this1) {
		return tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1);
	}
	static getFile(this1) {
		switch(this1._hx_index) {
		case 0:
			var _g = this1.v;
			throw new js__$Boot_HaxeError("expected file but got plain value");
		case 1:
			var u = this1.handle;
			var this2 = u;
			return this2;
		}
	}
}
tink_web_forms__$FormField_FormField_$Impl_$.__name__ = true;
class tink_web_forms__$FormFile_FormFile_$Impl_$ {
	static _new(v) {
		var this1 = v;
		return this1;
	}
	static toJson(this1) {
		var this2 = this1.fileName;
		var this3 = this1.mimeType;
		var src = this1.read();
		var chunk = null;
		var write = tink_io_RealSourceTools.all(src).handle(function(c) {
			chunk = tink_core_OutcomeTools.sure(c);
		});
		var v;
		if(chunk != null) {
			v = chunk.toBytes();
		} else {
			if(write != null) {
				write.cancel();
			}
			throw new js__$Boot_HaxeError(new tink_core_TypedError(501,"Can only upload files through JSON backed by with sync sources but got a " + Std.string(src),{ fileName : "tink/web/forms/FormFile.hx", lineNumber : 34, className : "tink.web.forms._FormFile.FormFile_Impl_", methodName : "toJson"}));
		}
		var this4 = { fileName : this2, mimeType : this3, content : v};
		return this4;
	}
	static ofJson(rep) {
		var data = tink_json__$Representation_Representation_$Impl_$.get(rep);
		var this1 = tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob(data.fileName,data.mimeType,data.content);
		return this1;
	}
	static ofBlob(name,type,data) {
		return tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob(name,type,data);
	}
}
tink_web_forms__$FormFile_FormFile_$Impl_$.__name__ = true;
class tink_web_routing__$Context_Path_$Impl_$ {
	static toString(this1) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < this1.length) {
			var p = this1[_g1];
			++_g1;
			_g.push(tink_url__$Portion_Portion_$Impl_$.stringly(p));
		}
		return "/" + _g.join("/");
	}
}
tink_web_routing__$Context_Path_$Impl_$.__name__ = true;
class tink_web_routing_AuthedContext extends tink_web_routing_Context {
	constructor(parent,accepts,request,depth,parts,params,session,user) {
		tink_web_routing_Context._hx_skip_constructor = true;
		super();
		tink_web_routing_Context._hx_skip_constructor = false;
		this._hx_constructor(parent,accepts,request,depth,parts,params,session,user);
	}
	_hx_constructor(parent,accepts,request,depth,parts,params,session,user) {
		this.session = session;
		var tmp;
		if(user == null) {
			tmp = session.map(function(s) {
				return s.getUser();
			});
		} else {
			var v = user;
			tmp = v;
		}
		this.user = tmp;
		super._hx_constructor(parent,accepts,request,depth,parts,params);
	}
	sub(descend) {
		return new tink_web_routing_AuthedContext(this,this.accepts,this.request,this.depth + descend,this.parts,this.params,this.session,this.user);
	}
}
tink_web_routing_AuthedContext.__name__ = true;
tink_web_routing_AuthedContext.__super__ = tink_web_routing_Context;
Object.assign(tink_web_routing_AuthedContext.prototype, {
	__class__: tink_web_routing_AuthedContext
});
class tink_web_routing__$Context_RequestReader_$Impl_$ {
	static ofStringReader(read) {
		return function(ctx) {
			return tink_core__$Promise_Promise_$Impl_$.next(ctx.allRaw(),function(body) {
				var o = body.toString();
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(o)));
			});
		};
	}
	static ofSafeStringReader(read) {
		return tink_web_routing__$Context_RequestReader_$Impl_$.ofStringReader(function(s) {
			return tink_core_Outcome.Success(read(s));
		});
	}
}
tink_web_routing__$Context_RequestReader_$Impl_$.__name__ = true;
class tink_web_routing__$Response_Response_$Impl_$ {
	static ofString(s) {
		return tink_web_routing__$Response_Response_$Impl_$.textual(null,"text/plain",s);
	}
	static ofBytes(b) {
		return tink_web_routing__$Response_Response_$Impl_$.binary(null,"application/octet-stream",b);
	}
	static ofUrl(u) {
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(302);
		var this2 = "location".toLowerCase();
		var this3 = new tink_http_ResponseHeaderBase(302,this1,[new tink_http_HeaderField(this2,tink__$Url_Url_$Impl_$.toString(u))],"HTTP/1.1");
		var this4 = new tink_http__$Response_OutgoingResponseData(this3,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY)));
		return this4;
	}
	static binary(code,contentType,bytes,headers) {
		return tink_http__$Response_OutgoingResponse_$Impl_$.blob(code,tink_chunk_ByteChunk.of(bytes),contentType,headers);
	}
	static empty(code) {
		if(code == null) {
			code = 200;
		}
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
		var this2 = new tink_http_ResponseHeaderBase(code,this1,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
		var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY)));
		return this3;
	}
	static textual(code,contentType,string,headers) {
		return tink_web_routing__$Response_Response_$Impl_$.binary(code,contentType,haxe_io_Bytes.ofString(string),headers);
	}
}
tink_web_routing__$Response_Response_$Impl_$.__name__ = true;
class tink_web_routing_Router {
}
tink_web_routing_Router.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Continue = 100;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SwitchingProtocols = 101;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Processing = 102;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.OK = 200;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Created = 201;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Accepted = 202;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NonAuthoritativeInformation = 203;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NoContent = 204;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ResetContent = 205;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PartialContent = 206;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MultiStatus = 207;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.AlreadyReported = 208;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.IMUsed = 226;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MultipleChoices = 300;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MovedPermanently = 301;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Found = 302;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SeeOther = 303;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotModified = 304;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UseProxy = 305;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SwitchProxy = 306;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.TemporaryRedirect = 307;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PermanentRedirect = 308;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.BadRequest = 400;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Unauthorized = 401;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PaymentRequired = 402;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Forbidden = 403;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotFound = 404;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MethodNotAllowed = 405;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotAcceptable = 406;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ProxyAuthenticationRequired = 407;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RequestTimeout = 408;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Conflict = 409;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Gone = 410;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.LengthRequired = 411;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PreconditionFailed = 412;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PayloadTooLarge = 413;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.URITooLong = 414;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnsupportedMediaType = 415;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RangeNotSatisfiable = 416;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ExpectationFailed = 417;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ImATeapot = 418;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MisdirectedRequest = 421;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnprocessableEntity = 422;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Locked = 423;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.FailedDependency = 424;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UpgradeRequired = 426;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PreconditionRequired = 428;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.TooManyRequests = 429;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RequestHeaderFieldsTooLarge = 431;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnavailableForLegalReasons = 451;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.InternalServerError = 500;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotImplemented = 501;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.BadGateway = 502;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ServiceUnavailable = 503;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.GatewayTimeout = 504;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.HTTPVersionNotSupported = 505;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.VariantAlsoNegotiates = 506;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.InsufficientStorage = 507;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.LoopDetected = 508;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotExtended = 510;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NetworkAuthenticationRequired = 511;
server_Main.app = new server_externs_express_Express();
tink_http_Header._hx_skip_constructor = false;
tink__$Url_Url_$Impl_$.SCHEME = 2;
tink__$Url_Url_$Impl_$.PAYLOAD = 3;
tink__$Url_Url_$Impl_$.AUTH = 6;
tink__$Url_Url_$Impl_$.HOSTNAMES = 7;
tink__$Url_Url_$Impl_$.PATH = 8;
tink__$Url_Url_$Impl_$.QUERY = 10;
tink__$Url_Url_$Impl_$.HASH = 12;
tink_url__$Path_Path_$Impl_$.root = (function($this) {
	var $r;
	var this1 = "/";
	$r = this1;
	return $r;
}(this));
tink_streams_StreamBase._hx_skip_constructor = false;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_FutureTrigger._hx_skip_constructor = false;
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 500;
tink_http_Message._hx_skip_constructor = false;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
tink_web_routing_Context._hx_skip_constructor = false;
tink_http__$Header_HeaderValue_$Impl_$.DAYS = "Sun,Mon,Tue,Wen,Thu,Fri,Sat".split(",");
tink_http__$Header_HeaderValue_$Impl_$.MONTHS = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(",");
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
server_TinkAPI.main = (function($this) {
	var $r;
	var router = new tink_web_routing_Router0(new server_Root());
	$r = tink_http_containers_NodeContainer.toNodeHandler(new tink_http_SimpleHandler(function(req) {
		var this1 = tink_web_routing_Context.ofRequest(req);
		var this2 = router.route(this1);
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_http__$Response_OutgoingResponse_$Impl_$.reportError);
		var ret = this2.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}));
	return $r;
}(this));
tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_http_ChunkedParser.LINEBREAK = tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString("\r\n"));
tink_http__$Header_HeaderName_$Impl_$.REFERER = "referer";
tink_http__$Header_HeaderName_$Impl_$.HOST = "host";
tink_http__$Header_HeaderName_$Impl_$.SET_COOKIE = "set-cookie";
tink_http__$Header_HeaderName_$Impl_$.COOKIE = "cookie";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_TYPE = "content-type";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_LENGTH = "content-length";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_DISPOSITION = "content-disposition";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT = "accept";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT_ENCODING = "accept-encoding";
tink_http__$Header_HeaderName_$Impl_$.TRANSFER_ENCODING = "transfer-encoding";
tink_http__$Header_HeaderName_$Impl_$.LOCATION = "location";
tink_http__$Header_HeaderName_$Impl_$.AUTHORIZATION = "authorization";
tink_http__$Header_HeaderName_$Impl_$.ORIGIN = "origin";
tink_http__$Header_HeaderName_$Impl_$.VARY = "vary";
tink_http__$Header_HeaderName_$Impl_$.CACHE_CONTROL = "cache-control";
tink_http__$Header_HeaderName_$Impl_$.EXPIRES = "expires";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_REQUEST_METHOD = "access-control-request-method";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_REQUEST_HEADERS = "access-control-request-headers";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_ORIGIN = "access-control-allow-origin";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_CREDENTIALS = "access-control-allow-credentials";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_EXPOSE_HEADERS = "access-control-expose-headers";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_MAX_AGE = "access-control-max-age";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_METHODS = "access-control-allow-methods";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_HEADERS = "access-control-allow-headers";
tink_http_HeaderParser.INVALID = tink_io_ParseStep.Failed(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Header.hx", lineNumber : 307, className : "tink.http.HeaderParser", methodName : "INVALID"}));
tink_http__$Method_Method_$Impl_$.GET = "GET";
tink_http__$Method_Method_$Impl_$.HEAD = "HEAD";
tink_http__$Method_Method_$Impl_$.OPTIONS = "OPTIONS";
tink_http__$Method_Method_$Impl_$.POST = "POST";
tink_http__$Method_Method_$Impl_$.PUT = "PUT";
tink_http__$Method_Method_$Impl_$.PATCH = "PATCH";
tink_http__$Method_Method_$Impl_$.DELETE = "DELETE";
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io__$Sink_SinkYielding_$Impl_$.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_io__$Worker_Worker_$Impl_$.EAGER = new tink_io__$Worker_EagerWorker();
tink_io__$Worker_Worker_$Impl_$.pool = [tink_io__$Worker_Worker_$Impl_$.EAGER];
tink_io_nodejs_WrappedBuffer.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
server_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hx.js.map